"use strict";(this.webpackChunk=this.webpackChunk||[]).push([[9225],{9225:(e,t,s)=>{s.r(t),s.d(t,{virtualListStore:()=>l});var o=s(8183),r=s(4875),i=s(4285);class c extends r.b{constructor(e){super(e,10)}clearRealmByPrefix(e){const{realms:t}=this.get();if(t){for(const s of t.getAllKeys())s.startsWith(e)&&t.delete(s);this.set({realms:t})}}}const l=new c;l.computeForRealm("items",null),l.computeForRealm("showFooter",!1),l.computeForRealm("footerHeight",0),l.computeForRealm("showHeader",!1),l.computeForRealm("headerHeight",0),l.computeForRealm("scrollTop",0),l.computeForRealm("scrollHeight",0),l.computeForRealm("offsetHeight",0),l.computeForRealm("listOffset",0),l.computeForRealm("itemHeights",{}),l.compute("rawVisibleItems",["items","scrollTop","itemHeights","offsetHeight","showHeader","headerHeight","listOffset"],((e,t,s,r,i,c,l)=>{if((0,o.B)("compute visibleItems"),!e)return null;const h=t-l,m=2.5*r,a=[];let n=i?c:0;const u=e.length;let f=-1;for(;++f<u;){const t=e[f],o=s[t]||0,i=n;n+=o;if(i<h){if(h-o-m>i)continue}else if(i>h+r+m)break;a.push({offset:i,key:t,index:f})}return(0,o.s)("compute visibleItems"),a})),function(e,t,s){let o,r,c=0;const l=`${t}_reselectCount`;e.compute(l,[s],(e=>((0,i.Xy)(o,e)||(r=e,c++),c))),e.compute(t,[l],(()=>(o=r,r=null,o)))}(l,"visibleItems","rawVisibleItems"),l.compute("heightWithoutFooter",["items","itemHeights","showHeader","headerHeight"],((e,t,s,o)=>{if(!e)return 0;let r=s?o:0,i=-1;const c=e.length;for(;++i<c;)r+=t[e[i]]||0;return r})),l.compute("height",["heightWithoutFooter","showFooter","footerHeight"],((e,t,s)=>t?e+s:e)),l.compute("length",["items"],(e=>e?e.length:0)),l.compute("allVisibleItemsHaveHeight",["visibleItems","itemHeights"],((e,t)=>{if(!e)return!1;for(const s of e)if(!t[s.key])return!1;return!0})),window.__virtualListStore=l},4875:(e,t,s)=>{s.d(t,{b:()=>h});var o=s(4698),r=s(8183),i=s(101),c=s(9684);const{Store:l}=c;class h extends l{constructor(e,t){super(e),this.set({realms:new o.c({maxSize:t})}),this._batches={}}setCurrentRealm(e){this.set({currentRealm:e})}setForRealm(e){const{currentRealm:t,realms:s}=this.get();s.set(t,Object.assign(s.get(t)||{},e)),this.set({realms:s})}computeForRealm(e,t){this.compute(e,["realms","currentRealm"],((s,o)=>{const r=s.get(o);return r&&r[e]||t}))}batchUpdateForRealm(e,t,s){const{currentRealm:o}=this.get();let c=this._batches[o];c||(c=this._batches[o]={});let l=c[e];l||(l=c[e]={}),l[t]=s,(0,i.b)((()=>{const t=this._batches[o]&&this._batches[o][e];if(!t)return;const s=Object.keys(t);if(!s.length)return;(0,r.B)("batchUpdate");const i=this.get()[e];for(const e of s)i[e]=t[e];delete this._batches[o][e];const{realms:c}=this.get();c.set(o,Object.assign(c.get(o)||{},{[e]:i})),this.set({realms:c}),(0,r.s)("batchUpdate")}))}}}}]);
//# sourceMappingURL=9225.f6f19a79081bbd2c0e20.9225.js.map