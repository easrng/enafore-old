{"version":3,"file":"7434.2e93cb9a1df1ed73588a.settings_instances_$instanceName.js","mappings":"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","sources":["webpack:///./src/routes/_components/ExternalLink.html","webpack:///./src/routes/_components/settings/instance/InstanceUserProfile.html","webpack:///./src/routes/_components/settings/instance/GenericInstanceSettings.html","webpack:///./src/routes/_components/settings/instance/HomeTimelineFilterSettings.html","webpack:///./src/routes/_components/settings/instance/NotificationFilterSettings.html","webpack:///./src/routes/_components/dialog/asyncDialogs/importShowTextConfirmationDialog.js","webpack:///./src/routes/_components/settings/instance/PushNotificationSettings.html","webpack:///./src/routes/_components/settings/instance/InstanceActions.html","webpack:///./src/routes/_components/dialog/asyncDialogs/importShowWordFilterDialog.js","webpack:///./src/routes/_components/settings/instance/WordFilterSettings.html","webpack:///./src/routes/_pages/settings/instances/[instanceName].html","webpack:///./src/routes/settings/instances/[instanceName].html"],"sourcesContent":["<a rel=\"nofollow noopener\"\n   target=\"_blank\"\n   {href}\n   aria-label={ariaLabel}\n   class={computedClass}>\n  <slot></slot>{#if showIcon}\n    <SvgIcon className=\"external-link-svg\" href=\"#fa-external-link\" />\n  {/if}</a>\n<style>\n  .external-link-with-icon {\n    display: inline-flex;\n    align-items: center;\n  }\n  :global(.external-link-with-icon.normal-icon-color .external-link-svg) {\n    fill: var(--body-text-color);\n  }\n</style>\n<script>\n  import { classname } from '../_utils/classname.js'\n  import SvgIcon from './SvgIcon.html'\n\n  export default {\n    data: () => ({\n      className: undefined,\n      normalIconColor: false,\n      ariaLabel: '',\n      showIcon: false\n    }),\n    computed: {\n      computedClass: ({ className, showIcon, normalIconColor }) => (classname(\n        'external-link',\n        className,\n        showIcon && 'external-link-with-icon',\n        normalIconColor && 'normal-icon-color'\n      ))\n    },\n    components: {\n      SvgIcon\n    }\n  }\n</script>\n","<div class=\"generic-instance-settings acct-current-user\">\n  <div class=\"acct-avatar\">\n    <Avatar account={verifyCredentials} size=\"big\" />\n  </div>\n  <ExternalLink className=\"acct-handle\"\n                href={verifyCredentials.url} >\n    {'@' + verifyCredentials.acct}\n  </ExternalLink>\n  <span class=\"acct-display-name\">\n    <AccountDisplayName account={verifyCredentials} />\n  </span>\n</div>\n<GenericInstanceSettingsStyle />\n<style>\n  .acct-current-user {\n    line-height: 1.4;\n    display: grid;\n    align-items: center;\n    font-size: 1.3em;\n    grid-template-areas:\n      \"avatar handle\"\n      \"avatar display-name\";\n    grid-template-columns: min-content 1fr;\n    grid-column-gap: 20px;\n    grid-row-gap: 10px;\n  }\n  :global(.acct-avatar) {\n    grid-area: avatar;\n  }\n  :global(.acct-handle) {\n    grid-area: handle;\n  }\n  .acct-display-name {\n    grid-area: display-name;\n  }\n</style>\n<script>\n  import ExternalLink from '../../ExternalLink.html'\n  import Avatar from '../../Avatar.html'\n  import AccountDisplayName from '../../profile/AccountDisplayName.html'\n  import GenericInstanceSettingsStyle from './GenericInstanceSettingsStyle.html'\n\n  export default {\n    components: {\n      Avatar,\n      ExternalLink,\n      AccountDisplayName,\n      GenericInstanceSettingsStyle\n    }\n  }\n</script>\n","<div class=\"generic-instance-settings\">\n  <form aria-label={label} ref:form>\n    {#each options as option, i (option.key) }\n      {#if i > 0}\n        <br>\n      {/if}\n      <input type=\"checkbox\"\n             id=\"instance-option-{option.key}\"\n             name=\"{option.key}\"\n             on:change=\"onChange(event)\"\n      >\n      <label for=\"instance-option-{option.key}\">\n        {option.label}\n      </label>\n    {/each}\n  </form>\n</div>\n<GenericInstanceSettingsStyle/>\n<script>\n  import GenericInstanceSettingsStyle from './GenericInstanceSettingsStyle.html'\n  import { store } from '../../../_store/store.js'\n\n  export default {\n    oncreate () {\n      const { instanceName, options } = this.get()\n      const { form } = this.refs\n      for (const { key, defaultValue } of options) {\n        form.elements[key].checked = this.store.getInstanceSetting(instanceName, key, defaultValue)\n      }\n    },\n    methods: {\n      onChange (event) {\n        const { instanceName } = this.get()\n        const { target } = event\n        this.store.setInstanceSetting(instanceName, target.name, target.checked)\n      }\n    },\n    store: () => store,\n    components: {\n      GenericInstanceSettingsStyle\n    }\n  }\n</script>\n","<GenericInstanceSettings\n  {instanceName}\n  {options}\n  label=\"Home timeline filter settings\"\n/>\n<script>\n  import GenericInstanceSettings from './GenericInstanceSettings.html'\n  import { HOME_REBLOGS, HOME_REPLIES } from '../../../_static/instanceSettings.js'\n\n  export default {\n    data: () => ({\n      options: [\n        {\n          key: HOME_REBLOGS,\n          label: \"Show boosts\",\n          defaultValue: true\n        },\n        {\n          key: HOME_REPLIES,\n          label: \"Show replies\",\n          defaultValue: true\n        }\n      ]\n    }),\n    components: {\n      GenericInstanceSettings\n    }\n  }\n</script>\n","<GenericInstanceSettings\n  {instanceName}\n  {options}\n  label=\"Notification filter settings\"\n/>\n<script>\n  import GenericInstanceSettings from './GenericInstanceSettings.html'\n  import {\n    NOTIFICATION_REBLOGS,\n    NOTIFICATION_FAVORITES,\n    NOTIFICATION_FOLLOWS,\n    NOTIFICATION_MENTIONS,\n    NOTIFICATION_POLLS,\n    NOTIFICATION_SUBSCRIPTIONS\n  } from '../../../_static/instanceSettings.js'\n\n  export default {\n    data: () => ({\n      options: [\n        {\n          key: NOTIFICATION_FOLLOWS,\n          label: \"New followers\",\n          defaultValue: true\n        },\n        {\n          key: NOTIFICATION_FAVORITES,\n          label: \"Favorites\",\n          defaultValue: true\n        },\n        {\n          key: NOTIFICATION_REBLOGS,\n          label: \"Boosts\",\n          defaultValue: true\n        },\n        {\n          key: NOTIFICATION_MENTIONS,\n          label: \"Mentions\",\n          defaultValue: true\n        },\n        {\n          key: NOTIFICATION_POLLS,\n          label: \"Poll results\",\n          defaultValue: true\n        },\n        {\n          key: NOTIFICATION_SUBSCRIPTIONS,\n          label: \"Subscribed posts\",\n          defaultValue: true\n        }\n      ]\n    }),\n    components: {\n      GenericInstanceSettings\n    }\n  }\n</script>\n","export const importShowTextConfirmationDialog = () => import(\n  '../creators/showTextConfirmationDialog.js'\n).then(mod => mod.default)\n","<div class=\"generic-instance-settings\">\n  {#if pushNotificationsSupport === false}\n    <p>Your browser doesn't support push notifications.</p>\n  {:elseif $notificationPermission === \"denied\"}\n    <p role=\"alert\">You have denied permission to show notifications.</p>\n  {:elseif $loggedInInstancesInOrder.length > 1}\n    <p>Note that you can only have push notifications for one instance at a time.</p>\n  {/if}\n  <form id=\"push-notification-settings\"\n        disabled=\"{!pushNotificationsSupport}\"\n        ref:form\n        aria-label=\"Push notification settings\">\n    {#each options as option, i (option.key)}\n      {#if i > 0}\n        <br>\n      {/if}\n      <input type=\"checkbox\"\n             id=\"push-notifications-{option.key}\"\n             name=\"{option.key}\"\n             disabled=\"{!pushNotificationsSupport}\"\n             on:change=\"onPushSettingsChange(event)\">\n      <label for=\"push-notifications-{option.key}\">{option.label}</label>\n    {/each}\n  </form>\n</div>\n<GenericInstanceSettingsStyle/>\n<style>\n  form[disabled=\"true\"] {\n    opacity: 0.5;\n  }\n  p {\n    margin: 0 0 10px 0;\n  }\n</style>\n<script>\n  import GenericInstanceSettingsStyle from './GenericInstanceSettingsStyle.html'\n  import { store } from '../../../_store/store.js'\n  import { importShowTextConfirmationDialog } from '../../dialog/asyncDialogs/importShowTextConfirmationDialog.js'\n  import { logOutOfInstance } from '../../../_actions/instances.js'\n  import { updatePushSubscriptionForInstance, updateAlerts } from '../../../_actions/pushSubscription.js'\n  import { toast } from '../../toast/toast.js'\n  import { get } from '../../../_utils/lodash-lite.js'\n  import { formatIntl } from '../../../_utils/formatIntl.js'\n\n  export default {\n    async oncreate () {\n      const { instanceName, options } = this.get()\n      await updatePushSubscriptionForInstance(instanceName)\n\n      const { form } = this.refs\n      const pushSubscription = this.store.getInstanceData(instanceName, 'pushSubscriptions')\n\n      for (const { key } of options) {\n        form.elements[key].checked = get(pushSubscription, ['alerts', key])\n      }\n    },\n    store: () => store,\n    data: () => ({\n      options: [\n        {\n          key: 'follow',\n          label: \"New followers\"\n        },\n        {\n          key: 'favourite',\n          label: \"Favorites\"\n        },\n        {\n          key: 'reblog',\n          label: \"Boosts\"\n        },\n        {\n          key: 'mention',\n          label: \"Mentions\"\n        },\n        {\n          key: 'poll',\n          label: \"Poll results\"\n        },\n        {\n          key: 'status',\n          label: \"Subscribed posts\"\n        }\n      ]\n    }),\n    computed: {\n      pushNotificationsSupport: ({ $pushNotificationsSupport }) => $pushNotificationsSupport\n    },\n    methods: {\n      async onPushSettingsChange (e) {\n        const { instanceName, options } = this.get()\n        const { form } = this.refs\n        const alerts = {}\n\n        for (const { key } of options) {\n          alerts[key] = form.elements[key].checked\n        }\n\n        try {\n          await updateAlerts(instanceName, alerts)\n        } catch (err) {\n          e.target.checked = !e.target.checked\n\n          // TODO: Better way to detect missing authorization scope\n          if (err.message.startsWith('403:')) {\n            const showTextConfirmationDialog = await importShowTextConfirmationDialog()\n            showTextConfirmationDialog({\n              text: formatIntl([\"You need to reauthenticate in order to enable push notification. Log out of \",[\"instance\"],\"?\"], { instance: instanceName })\n            }).on('positive', () => {\n              /* no await */ logOutOfInstance(instanceName)\n            })\n          } else {\n            toast.say(formatIntl([\"Failed to update push notification settings: \",[\"error\"]], {\n              error: err.message || ''\n            }))\n          }\n        }\n      }\n    },\n    components: {\n      GenericInstanceSettingsStyle\n    }\n  }\n</script>\n","<form class=\"instance-actions\" aria-label=\"Switch to or log out of this instance\">\n  {#if $loggedInInstancesInOrder.length > 1 && $currentInstance !== instanceName}\n    <button class=\"primary\"\n            on:click=\"onSwitchToThisInstance(event)\">\n      Switch to this instance\n    </button>\n  {/if}\n  <button on:click=\"onLogOut(event)\">Log out</button>\n</form>\n<style>\n  .instance-actions {\n    width: 100%;\n    display: flex;\n    justify-content: right;\n    margin: 20px 0;\n  }\n  .instance-actions button {\n    margin: 0 5px;\n    flex-basis: 100%;\n  }\n</style>\n<script>\n  import { store } from '../../../_store/store.js'\n  import { importShowTextConfirmationDialog } from '../../dialog/asyncDialogs/importShowTextConfirmationDialog.js'\n  import { switchToInstance, logOutOfInstance } from '../../../_actions/instances.js'\n  import { formatIntl } from '../../../_utils/formatIntl.js'\n\n  export default {\n    store: () => store,\n    methods: {\n      onSwitchToThisInstance (e) {\n        e.preventDefault()\n        const { instanceName } = this.get()\n        switchToInstance(instanceName)\n      },\n      async onLogOut (e) {\n        e.preventDefault()\n        const { instanceName } = this.get()\n\n        const showTextConfirmationDialog = await importShowTextConfirmationDialog()\n        showTextConfirmationDialog({\n          text: formatIntl([\"Log out of \",[\"instance\"],\"?\"], { instance: instanceName })\n        }).on('positive', () => {\n          // TODO: dumb timing hack because the modal navigates back while we're trying to navigate forward\n          setTimeout(() => {\n            /* no await */logOutOfInstance(instanceName)\n          }, 200)\n        })\n      }\n    }\n  }\n</script>\n","export const importShowWordFilterDialog = () => import(\n  '../creators/showWordFilterDialog.js'\n).then(mod => mod.default)\n","<div class=\"generic-instance-settings word-filters\">\n  {#if filters.length}\n    <table class=\"word-filters-table\">\n      <thead>\n        <tr>\n          <th>Word or phrase</th>\n          <th>Contexts</th>\n          <th></th>\n          <th></th>\n        </tr>\n      </thead>\n      <tbody>\n        {#each formattedFilters as filter (filter.id)}\n          <tr>\n            <td class=\"word-filters-break\">{filter.phrase}</td>\n            <td class=\"word-filters-break\">{filter.formattedContexts}</td>\n            <td>\n              <IconButton label=\"Edit\" href=\"#fa-pencil\" on:click=\"edit(filter)\" clickListener={true} />\n            </td>\n            <td>\n              <IconButton label=\"Delete\" href=\"#fa-trash\" on:click=\"del(filter)\" clickListener={true} />\n            </td>\n          </tr>\n        {/each}\n      </tbody>\n    </table>\n  {:else}\n    <p class=\"word-filters-p\">You don't have any word filters.</p>\n  {/if}\n  <button type=\"button\" on:click=\"add()\">Add filter</button>\n</div>\n<GenericInstanceSettingsStyle />\n<style>\n  .word-filters-table {\n    width: 100%\n  }\n  p.word-filters-p, .word-filters-table {\n    margin: 0 0 10px 0;\n  }\n\n  .word-filters-break {\n    word-break: break-word;\n    text-overflow: ellipsis;\n  }\n\n  @media (max-width: 767px) {\n    .word-filters-table {\n      table-layout: fixed;\n    }\n  }\n\n</style>\n<script>\n  import GenericInstanceSettingsStyle from './GenericInstanceSettingsStyle.html'\n  import IconButton from '../../IconButton.html'\n  import { store } from '../../../_store/store.js'\n  import { LOCALE } from '../../../_static/intl.js'\n  import { importShowWordFilterDialog } from '../../dialog/asyncDialogs/importShowWordFilterDialog.js'\n  import { deleteFilter } from '../../../_actions/filters.js'\n  import { thunk } from '../../../_utils/thunk.js'\n\n  const listFormat = thunk(() => new Intl.ListFormat(LOCALE, { style: 'long', type: 'conjunction' }))\n\n  export default {\n    store: () => store,\n    computed: {\n      filters: ({ instanceName, $instanceFilters }) => $instanceFilters[instanceName] || [],\n      formattedFilters: ({ filters }) => filters.map(filter => ({\n        ...filter,\n        formattedContexts: listFormat().format(filter.context.map(context => {\n          switch (context) {\n            case 'home':\n              return \"Home and lists\"\n            case 'notifications':\n              return \"Notifications\"\n            case 'public':\n              return \"Public timelines\"\n            case 'thread':\n              return \"Conversations\"\n            case 'account':\n              return \"Profiles\"\n            default:\n              return \"Unknown\"\n          }\n        }))\n      }))\n    },\n    methods: {\n      async add () {\n        const { instanceName } = this.get()\n        const showWordFilterDialog = await importShowWordFilterDialog()\n        await showWordFilterDialog({ instanceName })\n      },\n      async edit (filter) {\n        const { instanceName } = this.get()\n        const showWordFilterDialog = await importShowWordFilterDialog()\n        await showWordFilterDialog({ instanceName, filter })\n      },\n      async del (filter) {\n        const { instanceName } = this.get()\n        await deleteFilter(instanceName, filter.id)\n      }\n    },\n    components: {\n      GenericInstanceSettingsStyle,\n      IconButton\n    }\n  }\n</script>\n","<SettingsLayout page='settings/instances/{params.instanceName}' label={params.instanceName}>\n  <h1 class=\"instance-name-h1\">{params.instanceName}</h1>\n\n  {#if verifyCredentials}\n    <h2>Logged in as</h2>\n    <InstanceUserProfile {verifyCredentials} />\n    <h2>Theme</h2>\n    <ThemeSettings {instanceName} />\n    <h2>Home timeline filters</h2>\n    <HomeTimelineFilterSettings {instanceName} />\n    <h2>Notification filters</h2>\n    <NotificationFilterSettings {instanceName} />\n    <h2>Word filters</h2>\n    <WordFilterSettings {instanceName} />\n    <h2>Push notifications</h2>\n    <PushNotificationSettings {instanceName} />\n    <InstanceActions {instanceName} />\n  {/if}\n</SettingsLayout>\n<style>\n  .instance-name-h1 {\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n</style>\n<script>\n  import { store } from '../../../_store/store.js'\n  import SettingsLayout from '../../../_components/settings/SettingsLayout.html'\n  import InstanceUserProfile from '../../../_components/settings/instance/InstanceUserProfile.html'\n  import HomeTimelineFilterSettings from '../../../_components/settings/instance/HomeTimelineFilterSettings.html'\n  import NotificationFilterSettings from '../../../_components/settings/instance/NotificationFilterSettings.html'\n  import PushNotificationSettings from '../../../_components/settings/instance/PushNotificationSettings.html'\n  import ThemeSettings from '../../../_components/settings/instance/ThemeSettings.html'\n  import InstanceActions from '../../../_components/settings/instance/InstanceActions.html'\n  import WordFilterSettings from '../../../_components/settings/instance/WordFilterSettings.html'\n  import { updateVerifyCredentialsForInstance } from '../../../_actions/instances.js'\n  import { updateFiltersForInstance } from '../../../_actions/filters.js'\n\n  export default {\n    async oncreate () {\n      const { instanceName } = this.get()\n      await Promise.all([\n        updateVerifyCredentialsForInstance(instanceName),\n        updateFiltersForInstance(instanceName)\n      ])\n    },\n    store: () => store,\n    computed: {\n      instanceName: ({ params }) => params.instanceName,\n      verifyCredentials: ({ $verifyCredentials, instanceName }) => $verifyCredentials && $verifyCredentials[instanceName]\n    },\n    components: {\n      SettingsLayout,\n      InstanceUserProfile,\n      PushNotificationSettings,\n      ThemeSettings,\n      InstanceActions,\n      HomeTimelineFilterSettings,\n      NotificationFilterSettings,\n      WordFilterSettings\n    }\n  }\n</script>\n","<Title name=\"{params.instanceName}\" settingsPage={true} />\n\n  <LazyPage {pageComponent} {params} />\n\n<script>\n  import Title from '../../_components/Title.html'\n  import LazyPage from '../../_components/LazyPage.html'\n  import pageComponent from '../../_pages/settings/instances/[instanceName].html'\n\n  export default {\n    components: {\n\n      Title,\n      LazyPage\n    },\n    data: () => ({\n      pageComponent\n    })\n  }\n</script>\n"],"names":["className","undefined","normalIconColor","ariaLabel","showIcon","href","computedClass","verifyCredentials","acct","url","onChange","event","instanceName","this","get","target","store","setInstanceSetting","name","checked","options","form","refs","key","defaultValue","elements","getInstanceSetting","option","label","i","importShowTextConfirmationDialog","then","mod","default","onPushSettingsChange","e","alerts","u","err","message","startsWith","text","formatIntl","instance","on","toast","say","error","pushSubscription","getInstanceData","pushNotificationsSupport","$notificationPermission","$loggedInInstancesInOrder","length","$pushNotificationsSupport","onSwitchToThisInstance","preventDefault","onLogOut","setTimeout","$currentInstance","importShowWordFilterDialog","listFormat","Intl","ListFormat","style","type","add","showWordFilterDialog","edit","filter","del","id","formattedFilters","phrase","formattedContexts","filters","$instanceFilters","map","format","context","Promise","all","params","$verifyCredentials","pageComponent"],"sourceRoot":""}