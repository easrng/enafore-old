{"version":3,"file":"4826.3cfd569550d98a626e7c.index.js","mappings":"6HAoBE,MAAMA,EAAgB,I,aAIlBC,YAAW,KACTC,KAAKC,IAAI,CAAEC,OAAO,GAAM,GACvBJ,EACT,C,uEACiB,CACXI,OAAO,G,8lBA7BaA,MAAQ,GAAK,UAAQ,iB,qFAArBA,MAAQ,GAAK,UAAQ,qB,wfCQmN,U,+CAwDrP,CACLC,QAA8DC,SAASC,U,skCA5DlEF,S,mZAAAA,S,4yBAGE,oP,uIAHFA,Q,wQCLN,MAAMG,EAAmB,IAAM,oHAEpCC,MAAKC,GAAOA,EAAIC,U,iCCOZ,MAAOC,SAAoBC,QAAQC,IAAI,CACrCN,KACA,EAAAO,EAAA,OAEFb,KAAKC,IAAI,CAAES,cACjB,C,0BAb0BA,W,6BAAaI,MAAK,SAAGC,Q,gOAARD,O,sBAAQC,Q,SAArBL,a,yMAcT,CACXA,gBAAYM,G,gEAhBH,mB,sGAAVN,W,kbCqCCV,KAAKiB,MAAMhB,IAAI,CACbiB,qBAAqB,EACrBC,wBAAwB,GAEhC,C,qYAMiBF,EAAA,E,+rBAxCF,e,yBAGwBG,U,+CAE7B,EAAAA,UAAY,EAAAC,cAAY,K,iGAPbC,c,qQAAAA,c,4cAU2BD,aAAe,SAAW,IAAE,iB,mIATjCA,a,kPADtBC,c,EAEdF,S,+EAGgCA,U,WAE7B,EAAAA,UAAY,EAAAC,a,0GAG0BA,aAAe,SAAW,IAAE,oB,wDATjCA,a,mgBA6B3C,UAQiB,qBAAEE,EAAoB,wBAAEC,I,OAA+BD,IAAyBC,C,qGAC5E,qBAAED,I,OAA4BA,C,qGAC9B,iBAAEE,I,OAAuB,EAAAC,EAAA,GAAW,CAAC,WAAW,CAAC,aAAc,CAAEC,SAAUF,G,4EChChG,EASa,CACPG,QAAO,M,oBChBN,WACL,MAAMC,EAAS,IAAIC,gBAAgB1B,SAAS2B,QACtCC,EAAcH,EAAOI,IAAI,eACzBC,EAAeL,EAAOI,IAAI,gBAChC,IAAKD,IAAgBE,EACnB,OAEF,MAAM,kBACJC,EAAiB,yBACjBC,GACEnB,EAAA,EAAMgB,MAEVE,EAAkBD,GAAgB,CAChCG,aAAcL,GAGXI,EAAyBE,SAASJ,IACrCE,EAAyBG,KAAKL,GAGhCjB,EAAA,EAAMhB,IAAI,CACRuC,gBAAiBN,EACjBC,oBACAC,6BAEFnB,EAAA,EAAMwB,QACN,QAAK,IACP,CDnBMC,GACA,MAAMb,EAAS,IAAIC,gBAAgB1B,SAAS2B,QACV,iBAAvBF,EAAOI,IAAI,eACdU,EAAA,EAASC,cAAcf,EAAOI,IAAI,QAEhD,C,yVACiBhB,EAAA,E,kNArBZ4B,gBAAe,E,mnBEeH,CACXC,cAAa,G,yIAdNA,c,SAAgBjB,Q,gRAAhBiB,e,sBAAgBjB,Q","sources":["webpack:///./src/routes/_components/LoadingPage.html","webpack:///./src/routes/_components/NotLoggedInHome.html","webpack:///./src/routes/_utils/asyncModules/importComposeBox.js","webpack:///./src/routes/_components/compose/LazyComposeBox.html","webpack:///./src/routes/_components/TimelineHomePage.html","webpack:///./src/routes/_pages/index.html","webpack:///./src/routes/_actions/doQuickLoginIfNecessary.js","webpack:///./src/routes/index.html"],"sourcesContent":["<div class=\"loading-page {shown ? '' : 'hidden'}\">\n  <LoadingSpinner />\n</div>\n<style>\n  .loading-page {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    height: 150px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    z-index: 50;\n    transition: opacity 0.25s linear;\n  }\n</style>\n<script>\n  import LoadingSpinner from './LoadingSpinner.html'\n\n  const SPINNER_DELAY = 700\n\n  export default {\n    oncreate () {\n      setTimeout(() => {\n        this.set({ shown: true })\n      }, SPINNER_DELAY)\n    },\n    data: () => ({\n      shown: false\n    }),\n    components: {\n      LoadingSpinner\n    }\n  }\n</script>","<HiddenFromSSR>\n  <FreeTextLayout>\n    <div class=\"not-logged-in-home\">\n      <div class=\"banner\">\n        <SvgIcon className=\"not-logged-in-home-svg\" href=\"#logo\" />\n        <h1>{appName}</h1>\n      </div>\n      <div>\n        {@html \"<p> Enafore is a somewhat unstable fediverse client forked from <a href=\\\"https://github.com/nolanlawson/pinafore\\\">Pinafore</a> with better support for Akkoma and glitch-soc instances. </p> <p> Get started by logging in to an instance: </p>\"}\n        <p style=\"text-align: right;\">\n          <a class=\"button primary\" rel=\"prefetch\" href=\"/settings/instances/add\">Log in</a>\n        </p>\n      </div>\n  </FreeTextLayout>\n</HiddenFromSSR>\n<style>\n  .not-logged-in-home {\n    margin: 10px;\n  }\n\n  .not-logged-in-home .banner {\n    display: flex;\n    align-items: center;\n    margin: 0 0 30px;\n  }\n\n  :global(.not-logged-in-home-svg) {\n    width: 70px;\n    height: 70px;\n    fill: var(--banner-fill);\n    display: inline-block;\n  }\n\n  .not-logged-in-home h1 {\n    color: var(--banner-fill);\n    display: inline-block;\n    font-size: 3em;\n    margin: auto 15px;\n  }\n\n  @media (max-width: 767px) {\n    .not-logged-in-home h1 {\n      font-size: 2.7em;\n    }\n  }\n\n  @media (max-width: 240px) {\n    .not-logged-in-home h1 {\n      font-size: 2.5em;\n    }\n  }\n</style>\n<script>\n  import FreeTextLayout from './FreeTextLayout.html'\n  import HiddenFromSSR from './HiddenFromSSR.html'\n  import SvgIcon from './SvgIcon.html'\n\n  export default {\n    components: {\n      FreeTextLayout,\n      HiddenFromSSR,\n      SvgIcon\n    },\n    data: () => {\n      return {\n        appName: process.env.UPSTREAM ? 'Enafore' : process.browser ? location.hostname : ''\n      }\n    }\n  }\n</script>","export const importComposeBox = () => import(\n  '../../_components/compose/ComposeBox.html'\n).then(mod => mod.default)\n","{#if composeBox}\n  <svelte:component this={composeBox} {realm} {hidden} />\n{/if}\n<script>\n  import { importComposeBox } from '../../_utils/asyncModules/importComposeBox.js'\n  import { importLoggedInStoreExtensions } from '../../_utils/asyncModules/importLoggedInStoreExtensions.js'\n\n  export default {\n    async oncreate () {\n      const [composeBox] = await Promise.all([\n        importComposeBox(),\n        importLoggedInStoreExtensions()\n      ])\n      this.set({ composeBox })\n    },\n    data: () => ({\n      composeBox: undefined\n    })\n  }\n</script>\n","<!--\n     Same as TimelinePage.html, but needs to manage visibility of ComposeBox itself\n     without a div wrapper due to sticky-positioned compose button.\n     TODO: this is a bit hacky due to code duplication\n -->\n<h1 class=\"sr-only\">{headingLabel}</h1>\n<div class=\"timeline-home-page\" aria-busy={hideTimeline}>\n  {#if hidePage}\n    <LoadingPage />\n  {/if}\n  <LazyComposeBox realm=\"home\" hidden={hidePage}/>\n  <div class=\"timeline-home-anchor-container\">\n    {#if !hidePage && hideTimeline}\n      <LoadingPage />\n    {/if}\n    <div class=\"timeline-home-reveal-container {hideTimeline ? 'hidden' : ''}\">\n      <LazyTimeline timeline=\"home\" />\n    </div>\n  </div>\n</div>\n<style>\n  .timeline-home-page, .timeline-home-anchor-container {\n    position: relative;\n  }\n  .timeline-home-reveal-container {\n    transition: opacity 0.2s linear; /* main page reveal */\n  }\n</style>\n<script>\n  import LazyTimeline from './timeline/LazyTimeline.html'\n  import { store } from '../_store/store.js'\n  import LoadingPage from './LoadingPage.html'\n  import LazyComposeBox from './compose/LazyComposeBox.html'\n  import { formatIntl } from '../_utils/formatIntl.js'\n\n  export default {\n    oncreate () {\n      this.store.set({\n        timelineInitialized: false,\n        timelinePreinitialized: false\n      })\n    },\n    computed: {\n      hidePage: ({ $timelineInitialized, $timelinePreinitialized }) => !$timelineInitialized && !$timelinePreinitialized,\n      hideTimeline: ({ $timelineInitialized }) => !$timelineInitialized,\n      headingLabel: ({ $currentInstance }) => formatIntl([\"Home on \",[\"instance\"]], { instance: $currentInstance })\n    },\n    store: () => store,\n    components: {\n      LazyComposeBox,\n      LazyTimeline,\n      LoadingPage\n    }\n  }\n</script>\n","{#if $isUserLoggedIn}\n  <TimelineHomePage/>\n{:else}\n  <NotLoggedInHome/>\n{/if}\n<script>\n  import NotLoggedInHome from '../_components/NotLoggedInHome.html'\n  import { store } from '../_store/store.js'\n  import TimelineHomePage from '../_components/TimelineHomePage.html'\n  import { observe } from 'svelte-extras'\n  import { doQuickLoginIfNecessary } from '../_actions/doQuickLoginIfNecessary.js'\n  import { database } from '../_database/database.js'\n\n  export default {\n    async oncreate () {\n      doQuickLoginIfNecessary()\n      const params = new URLSearchParams(location.search)\n      if (typeof params.get('icon') === 'string') {\n        await database.setIconColors(params.get('icon'))\n      }\n    },\n    store: () => store,\n    methods: {\n      observe\n    },\n    components: {\n      NotLoggedInHome,\n      TimelineHomePage\n    }\n  }\n</script>\n","// \"Secret\" API to quickly log in with an access token and instance name.\n// Used in the integration tests. Can't see a problem with exposing this publicly\n// since you would have to know the access token anyway.\n\nimport { store } from '../_store/store.js'\nimport { goto } from '../../../__sapper__/client.js'\n\nexport function doQuickLoginIfNecessary () {\n  const params = new URLSearchParams(location.search)\n  const accessToken = params.get('accessToken')\n  const instanceName = params.get('instanceName')\n  if (!accessToken || !instanceName) {\n    return\n  }\n  const {\n    loggedInInstances,\n    loggedInInstancesInOrder\n  } = store.get()\n\n  loggedInInstances[instanceName] = {\n    access_token: accessToken\n  }\n\n  if (!loggedInInstancesInOrder.includes(instanceName)) {\n    loggedInInstancesInOrder.push(instanceName)\n  }\n\n  store.set({\n    currentInstance: instanceName,\n    loggedInInstances,\n    loggedInInstancesInOrder\n  })\n  store.save()\n  goto('/') // re-navigate without the URL params\n}\n","<Title name=\"Home\" />\n\n  <LazyPage {pageComponent} {params} />\n\n<script>\n  import Title from './_components/Title.html'\n  import LazyPage from './_components/LazyPage.html'\n  import pageComponent from './_pages/index.html'\n\n  export default {\n    components: {\n\n      Title,\n      LazyPage\n    },\n    data: () => ({\n      pageComponent\n    })\n  }\n</script>\n"],"names":["SPINNER_DELAY","setTimeout","this","set","shown","appName","location","hostname","importComposeBox","then","mod","default","composeBox","Promise","all","importLoggedInStoreExtensions","realm","hidden","undefined","store","timelineInitialized","timelinePreinitialized","hidePage","hideTimeline","headingLabel","$timelineInitialized","$timelinePreinitialized","$currentInstance","formatIntl","instance","observe","params","URLSearchParams","search","accessToken","get","instanceName","loggedInInstances","loggedInInstancesInOrder","access_token","includes","push","currentInstance","save","doQuickLoginIfNecessary","database","setIconColors","$isUserLoggedIn","pageComponent"],"sourceRoot":""}