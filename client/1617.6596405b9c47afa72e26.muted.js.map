{"version":3,"file":"1617.6596405b9c47afa72e26.muted.js","mappings":"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","sources":["webpack:///./src/routes/_pages/muted.html","webpack:///./src/routes/muted.html","webpack:///./src/routes/_actions/accounts.js","webpack:///./src/routes/_api/relationships.js","webpack:///./src/routes/_actions/mute.js","webpack:///./src/routes/_api/mute.js","webpack:///./src/routes/_api/blockedAndMuted.js","webpack:///./src/routes/_api/user.js"],"sourcesContent":["<DynamicPageBanner title=\"Muted users\" icon=\"#fa-volume-off\" />\n{#if $isUserLoggedIn }\n  <AccountsListPage {accountsFetcher} {accountActions} />\n{/if}\n<script>\n  import AccountsListPage from '../_components/AccountsListPage.html'\n  import { store } from '../_store/store.js'\n  import { getMutedAccounts } from '../_api/blockedAndMuted.js'\n  import DynamicPageBanner from '../_components/DynamicPageBanner.html'\n  import { setAccountMuted } from '../_actions/mute.js'\n\n  export default {\n    data: () => ({\n      accountActions: [\n        {\n          icon: '#fa-volume-up',\n          label: \"Unmute\",\n          onclick: (accountId) => setAccountMuted(accountId,\n            /* mute */ false,\n            /* notifications */ false,\n            /* toastOnSuccess */ true)\n        }\n      ]\n    }),\n    computed: {\n      accountsFetcher: ({ $currentInstance, $accessToken }) => () => getMutedAccounts($currentInstance, $accessToken)\n    },\n    store: () => store,\n    components: {\n      AccountsListPage,\n      DynamicPageBanner\n    }\n  }\n</script>\n","<Title name=\"Muted users\" />\n\n  <LazyPage {pageComponent} {params} />\n\n<script>\n  import Title from './_components/Title.html'\n  import LazyPage from './_components/LazyPage.html'\n  import pageComponent from './_pages/muted.html'\n\n  export default {\n    components: {\n\n      Title,\n      LazyPage\n    },\n    data: () => ({\n      pageComponent\n    })\n  }\n</script>\n","import { getAccount } from '../_api/user.js'\nimport { getRelationship } from '../_api/relationships.js'\nimport { database } from '../_database/database.js'\nimport { store } from '../_store/store.js'\n\nasync function _updateAccount (accountId, instanceName, accessToken) {\n  const localPromise = database.getAccount(instanceName, accountId)\n  const remotePromise = getAccount(instanceName, accessToken, accountId).then(account => {\n    /* no await */ database.setAccount(instanceName, account)\n    return account\n  })\n\n  try {\n    store.set({ currentAccountProfile: (await localPromise) })\n  } catch (e) {\n    console.error(e)\n  }\n  try {\n    store.set({ currentAccountProfile: (await remotePromise) })\n  } catch (e) {\n    console.error(e)\n  }\n}\n\nasync function _updateRelationship (accountId, instanceName, accessToken) {\n  const localPromise = database.getRelationship(instanceName, accountId)\n  const remotePromise = getRelationship(instanceName, accessToken, accountId).then(relationship => {\n    /* no await */ database.setRelationship(instanceName, relationship)\n    return relationship\n  })\n  try {\n    store.set({ currentAccountRelationship: (await localPromise) })\n  } catch (e) {\n    console.error(e)\n  }\n  try {\n    store.set({ currentAccountRelationship: (await remotePromise) })\n  } catch (e) {\n    console.error(e)\n  }\n}\n\nexport async function updateLocalRelationship (instanceName, accountId, relationship) {\n  await database.setRelationship(instanceName, relationship)\n  try {\n    store.set({ currentAccountRelationship: relationship })\n  } catch (e) {\n    console.error(e)\n  }\n}\n\nexport async function clearProfileAndRelationship () {\n  store.set({\n    currentAccountProfile: null,\n    currentAccountRelationship: null\n  })\n}\n\nexport async function updateProfileAndRelationship (accountId) {\n  const { currentInstance, accessToken } = store.get()\n\n  await clearProfileAndRelationship()\n  await Promise.all([\n    _updateAccount(accountId, currentInstance, accessToken),\n    _updateRelationship(accountId, currentInstance, accessToken)\n  ])\n}\n\nexport async function updateRelationship (accountId) {\n  const { currentInstance, accessToken } = store.get()\n\n  await clearProfileAndRelationship()\n  await _updateRelationship(accountId, currentInstance, accessToken)\n}\n","import { basename, auth } from './utils.js'\nimport { get, paramsString, DEFAULT_TIMEOUT } from '../_utils/ajax.js'\n\nexport async function getRelationship (instanceName, accessToken, accountId) {\n  const url = `${basename(instanceName)}/api/v1/accounts/relationships?${paramsString({ id: accountId })}`\n  const res = await get(url, auth(accessToken), { timeout: DEFAULT_TIMEOUT })\n  return res[0]\n}\n","import { store } from '../_store/store.js'\nimport { muteAccount, unmuteAccount } from '../_api/mute.js'\nimport { toast } from '../_components/toast/toast.js'\nimport { updateLocalRelationship } from './accounts.js'\nimport { emit } from '../_utils/eventBus.js'\nimport { formatIntl } from '../_utils/formatIntl.js'\n\nexport async function setAccountMuted (accountId, mute, notifications, toastOnSuccess) {\n  const { currentInstance, accessToken } = store.get()\n  try {\n    let relationship\n    if (mute) {\n      relationship = await muteAccount(currentInstance, accessToken, accountId, notifications)\n    } else {\n      relationship = await unmuteAccount(currentInstance, accessToken, accountId)\n    }\n    await updateLocalRelationship(currentInstance, accountId, relationship)\n    if (toastOnSuccess) {\n      /* no await */ toast.say(mute ? \"Muted account\" : \"Unmuted account\")\n    }\n    emit('refreshAccountsList')\n  } catch (e) {\n    console.error(e)\n    /* no await */ toast.say(mute\n      ? formatIntl([\"Unable to mute account: \",[\"error\"]], { error: (e.message || '') })\n      : formatIntl([\"Unable to unmute account: \",[\"error\"]], { error: (e.message || '') })\n    )\n  }\n}\n","import { auth, basename } from './utils.js'\nimport { post, WRITE_TIMEOUT } from '../_utils/ajax.js'\n\nexport async function muteAccount (instanceName, accessToken, accountId, notifications) {\n  const url = `${basename(instanceName)}/api/v1/accounts/${accountId}/mute`\n  return post(url, { notifications }, auth(accessToken), { timeout: WRITE_TIMEOUT })\n}\n\nexport async function unmuteAccount (instanceName, accessToken, accountId) {\n  const url = `${basename(instanceName)}/api/v1/accounts/${accountId}/unmute`\n  return post(url, null, auth(accessToken), { timeout: WRITE_TIMEOUT })\n}\n","import { DEFAULT_TIMEOUT, get, paramsString } from '../_utils/ajax.js'\nimport { auth, basename } from './utils.js'\n\nexport async function getBlockedAccounts (instanceName, accessToken, limit = 80) {\n  let url = `${basename(instanceName)}/api/v1/blocks`\n  url += '?' + paramsString({ limit })\n  return get(url, auth(accessToken), { timeout: DEFAULT_TIMEOUT })\n}\n\nexport async function getMutedAccounts (instanceName, accessToken, limit = 80) {\n  let url = `${basename(instanceName)}/api/v1/mutes`\n  url += '?' + paramsString({ limit })\n  return get(url, auth(accessToken), { timeout: DEFAULT_TIMEOUT })\n}\n","import { get, DEFAULT_TIMEOUT } from '../_utils/ajax.js'\nimport { auth, basename } from './utils.js'\n\nexport function getVerifyCredentials (instanceName, accessToken) {\n  const url = `${basename(instanceName)}/api/v1/accounts/verify_credentials`\n  return get(url, auth(accessToken), { timeout: DEFAULT_TIMEOUT })\n}\n\nexport function getAccount (instanceName, accessToken, accountId) {\n  const url = `${basename(instanceName)}/api/v1/accounts/${accountId}`\n  return get(url, auth(accessToken), { timeout: DEFAULT_TIMEOUT })\n}\n"],"names":["accountsFetcher","accountActions","store","icon","label","onclick","accountId","$isUserLoggedIn","$currentInstance","$accessToken","g","pageComponent","params","async","_updateAccount","instanceName","accessToken","localPromise","database","getAccount","remotePromise","then","account","setAccount","set","currentAccountProfile","e","console","error","_updateRelationship","getRelationship","url","id","timeout","relationship","setRelationship","currentAccountRelationship","updateLocalRelationship","clearProfileAndRelationship","updateProfileAndRelationship","currentInstance","get","Promise","all","updateRelationship","setAccountMuted","mute","notifications","toastOnSuccess","muteAccount","unmuteAccount","toast","say","formatIntl","message","getBlockedAccounts","limit","getMutedAccounts","getVerifyCredentials"],"sourceRoot":""}