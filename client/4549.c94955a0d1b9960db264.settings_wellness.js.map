{"version":3,"file":"4549.c94955a0d1b9960db264.settings_wellness.js","mappings":"49BAgCiB,CACXA,UAAW,I,+7BAjCSA,UAAS,iB,mIAATA,UAAS,qB,0QCsFnC,EASa,CACP,sBAAAC,GACE,MAAM,sBACJC,EAAqB,oBACrBC,EAAmB,iBACnBC,EAAgB,yBAChBC,EAAwB,0BACxBC,EAAyB,gBACzBC,GACEC,KAAKC,MAAMC,MACfC,SAASC,cAAc,qBAAqBC,QAAUX,GACpDC,GACAC,GACAC,GACAC,GACAC,CACR,EACI,gBAAAO,CAAkBC,GAChB,MAAM,QAAEF,GAAYE,EAAEC,OACtBR,KAAKC,MAAMQ,IAAI,CACbf,sBAAuBW,EACvBV,oBAAqBU,EACrBT,iBAAkBS,EAClBR,yBAA0BQ,EAC1BP,0BAA2BO,EAC3BN,gBAAiBM,IAEnBL,KAAKC,MAAMS,MACjB,EACI,QAAAC,GACEX,KAAKP,yBACLO,KAAKC,MAAMS,MACjB,G,aAvCIV,KAAKP,wBACX,C,mDAwCiBQ,EAAA,E,21BAvHOK,iBAAiBM,E,+EAUqBD,SAASC,E,6EAKXD,SAASC,E,0EAKZD,SAASC,E,kFAUDD,SAASC,E,mFAKRD,SAASC,E,mFAKTD,SAASC,E,iLAgBnBD,SAASC,E,q6MATjBC,iBAAmB,IAAM,EAAAA,iBAAmB,K,2oBArCjEC,wB,mEAKAC,sB,mEAKAC,mB,mMAUAC,2B,mEAKAC,4B,mEAKAC,4B,gYAgBAC,kB,+OA9CAN,wB,qCAKAC,sB,kCAKAC,mB,0CAUAC,2B,2CAKAC,4B,2CAKAC,4B,oDAOqBN,iBAAmB,IAAM,EAAAA,iBAAmB,O,4CASjEO,iB,g1BCnDV,CACXC,cAAa,G,8IAhB2B,K,mBAEjCA,c,SAAgBC,Q,gRAAhBD,e,sBAAgBC,Q","sources":["webpack:///./src/routes/_components/InfoAside.html","webpack:///./src/routes/_pages/settings/wellness.html","webpack:///./src/routes/settings/wellness.html"],"sourcesContent":["<aside class=\"info-aside {className}\">\n  <SvgIcon href=\"#fa-info-circle\" className=\"aside-icon\" />\n  <span>\n    <slot></slot>\n  </span>\n</aside>\n<style>\n  .info-aside {\n    font-size: 1.2em;\n    color: var(--deemphasized-text-color);\n    display: flex;\n    align-items: center;\n  }\n  :global(.info-aside a) {\n    text-decoration: underline;\n    color: var(--deemphasized-text-color);\n  }\n  :global(.info-aside span) {\n    flex: 1;\n  }\n  :global(.aside-icon) {\n    fill: var(--deemphasized-text-color);\n    width: 18px;\n    height: 18px;\n    margin: 0 10px 0 5px;\n    min-width: 18px;\n  }\n</style>\n<script>\n  import SvgIcon from './SvgIcon.html'\n\n  export default {\n    data: () => ({\n      className: ''\n    }),\n    components: {\n      SvgIcon\n    }\n  }\n</script>\n","<SettingsLayout page='settings/wellness' label=\"Wellness\">\n  <h1>Wellness settings</h1>\n\n  <p>\n    Wellness settings are designed to reduce the addictive or anxiety-inducing aspects of social media. Choose any options that work well for you.\n  </p>\n\n  <form class=\"ui-settings\">\n    <label class=\"setting-group\">\n      <input type=\"checkbox\" id=\"choice-check-all\"\n             on:change=\"onCheckAllChange(event)\">\n      Enable all\n    </label>\n  </form>\n\n  <h2>Metrics</h2>\n\n  <form class=\"ui-settings\">\n    <label class=\"setting-group\">\n      <input type=\"checkbox\" id=\"choice-disable-follower-counts\"\n             bind:checked=\"$disableFollowerCounts\" on:change=\"onChange(event)\">\n      Hide follower counts (capped at 10)\n    </label>\n    <label class=\"setting-group\">\n      <input type=\"checkbox\" id=\"choice-disable-reblog-counts\"\n             bind:checked=\"$disableReblogCounts\" on:change=\"onChange(event)\">\n      Hide boost counts\n    </label>\n    <label class=\"setting-group\">\n      <input type=\"checkbox\" id=\"choice-disable-fav-counts\"\n             bind:checked=\"$disableFavCounts\" on:change=\"onChange(event)\">\n      Hide favorite counts\n    </label>\n  </form>\n\n  <h2>Immediacy</h2>\n\n  <form class=\"ui-settings\">\n    <label class=\"setting-group\">\n      <input type=\"checkbox\" id=\"choice-disable-unread-notification-counts\"\n             bind:checked=\"$disableNotificationBadge\" on:change=\"onChange(event)\">\n      Hide unread notifications count (i.e. the red dot)\n    </label>\n    <label class=\"setting-group\">\n      <input type=\"checkbox\" id=\"choice-disable-follow-request-count\"\n             bind:checked=\"$disableFollowRequestCount\" on:change=\"onChange(event)\">\n      Hide follow request count\n    </label>\n    <label class=\"settings-group\">\n      <input type=\"checkbox\" id=\"choice-disable-relative-timestamps\"\n             bind:checked=\"$disableRelativeTimestamps\" on:change=\"onChange(event)\">\n      Show absolute timestamps (e.g. \"March 3rd\") instead of relative timestamps (e.g. \"5 minutes ago\")\n    </label>\n  </form>\n\n  <InfoAside className=\"wellness-aside\">\n    You can filter or disable notifications in the\n    <a rel=\"prefetch\" href=\"/settings/instances{$currentInstance ? '/' + $currentInstance : ''}\">instance settings</a>.\n    \n  </InfoAside>\n\n  <h2>UI</h2>\n\n  <form class=\"ui-settings\">\n    <label class=\"setting-group\">\n      <input type=\"checkbox\" id=\"choice-grayscale\"\n             bind:checked=\"$enableGrayscale\" on:change=\"onChange(event)\">\n      Show emojis, images, and videos in grayscale\n    </label>\n  </form>\n  <p>\n    These settings are partly based on guidelines from the <a rel=\"noopener\" target=\"_blank\" href=\"https://humanetech.com\">Center for Humane Technology</a>.\n  </p>\n</SettingsLayout>\n<UISettingsStyles />\n<style>\n  :global(.wellness-aside) {\n    margin: 20px 10px 0px 10px;\n  }\n</style>\n<script>\n  import SettingsLayout from '../../_components/settings/SettingsLayout.html'\n  import { store } from '../../_store/store.js'\n  import InfoAside from '../../_components/InfoAside.html'\n  import UISettingsStyles from '../../_components/settings/UISettingsStyles.html'\n\n  export default {\n    oncreate () {\n      this.flushChangesToCheckAll()\n    },\n    components: {\n      SettingsLayout,\n      InfoAside,\n      UISettingsStyles\n    },\n    methods: {\n      flushChangesToCheckAll () {\n        const {\n          disableFollowerCounts,\n          disableReblogCounts,\n          disableFavCounts,\n          disableNotificationBadge,\n          disableRelativeTimestamps,\n          enableGrayscale\n        } = this.store.get()\n        document.querySelector('#choice-check-all').checked = disableFollowerCounts &&\n          disableReblogCounts &&\n          disableFavCounts &&\n          disableNotificationBadge &&\n          disableRelativeTimestamps &&\n          enableGrayscale\n      },\n      onCheckAllChange (e) {\n        const { checked } = e.target\n        this.store.set({\n          disableFollowerCounts: checked,\n          disableReblogCounts: checked,\n          disableFavCounts: checked,\n          disableNotificationBadge: checked,\n          disableRelativeTimestamps: checked,\n          enableGrayscale: checked\n        })\n        this.store.save()\n      },\n      onChange () {\n        this.flushChangesToCheckAll()\n        this.store.save()\n      }\n    },\n    store: () => store\n  }\n</script>\n","<Title name=\"Wellness settings\" settingsPage={true} />\n\n  <LazyPage {pageComponent} {params} />\n\n<script>\n  import Title from '../_components/Title.html'\n  import LazyPage from '../_components/LazyPage.html'\n  import pageComponent from '../_pages/settings/wellness.html'\n\n  export default {\n    components: {\n\n      Title,\n      LazyPage\n    },\n    data: () => ({\n      pageComponent\n    })\n  }\n</script>\n"],"names":["className","flushChangesToCheckAll","disableFollowerCounts","disableReblogCounts","disableFavCounts","disableNotificationBadge","disableRelativeTimestamps","enableGrayscale","this","store","get","document","querySelector","checked","onCheckAllChange","e","target","set","save","onChange","event","$currentInstance","$disableFollowerCounts","$disableReblogCounts","$disableFavCounts","$disableNotificationBadge","$disableFollowRequestCount","$disableRelativeTimestamps","$enableGrayscale","pageComponent","params"],"sourceRoot":""}