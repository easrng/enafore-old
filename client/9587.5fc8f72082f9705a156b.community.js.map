{"version":3,"file":"9587.5fc8f72082f9705a156b.community.js","mappings":"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","sources":["webpack:///./src/routes/_components/community/PageList.html","webpack:///./src/routes/_components/community/PageListItem.html","webpack:///./src/routes/_pages/community/index.html","webpack:///./src/routes/community/index.html","webpack:///./src/routes/_actions/followRequests.js","webpack:///./src/routes/_actions/lists.js","webpack:///./src/routes/_api/lists.js","webpack:///./src/routes/_api/followRequests.js"],"sourcesContent":["<div class=\"page-list-wrapper\">\n  {#if label}\n  <ul class=\"page-list\" aria-label={label}>\n    <slot></slot>\n  </ul>\n  {:else}\n  <ul class=\"page-list\">\n    <slot></slot>\n  </ul>\n  {/if}\n</div>\n<style>\n  .page-list-wrapper {\n    margin: 20px 20px;\n  }\n  ul.page-list {\n    list-style: none;\n    width: 100%;\n    border: 1px solid var(--settings-list-item-border);\n    margin: 0 auto;\n    box-sizing: border-box;\n  }\n  @media (max-width: 767px) {\n    .page-list-wrapper {\n      margin: 20px 0;\n    }\n  }\n</style>","<li class=\"page-list-item\">\n  <a {href} rel=\"prefetch\" id=\"page-list-item-{href}\">\n    <SvgIcon className=\"page-list-item-svg\" href={icon} />\n    <span aria-label={ariaLabel}>\n      {label}\n    </span>\n    {#if pinnable}\n      <RadioGroupButton\n        id=\"pinnables\"\n        className=\"pinnable-button\"\n        checked={$pinnedPage === href}\n        label={pinLabel}\n        index={pinIndex}\n        on:click=\"onPinClick(event)\"\n      >\n        <SvgIcon className=\"pinnable-svg\" href=\"#fa-thumb-tack\" />\n    </RadioGroupButton>\n    {/if}\n  </a>\n</li>\n<style>\n  .page-list-item {\n    border: 1px solid var(--settings-list-item-border);\n    font-size: 1.3em;\n    display: flex;\n    flex-direction: column;\n  }\n  .page-list-item a {\n    padding: 20px 40px;\n    background: var(--settings-list-item-bg);\n    display: grid;\n    grid-template-columns: min-content 1fr min-content;\n    align-items: center;\n  }\n  .page-list-item a, .page-list-item a:visited {\n    color: var(--body-text-color);\n  }\n  .page-list-item a:hover {\n    text-decoration: none;\n    background: var(--settings-list-item-bg-hover);\n    color: var(--body-text-color);\n  }\n  .page-list-item a:active {\n    background: var(--settings-list-item-bg-active);\n  }\n  :global(.page-list-item-svg) {\n    width: 24px;\n    height: 24px;\n    display: inline-block;\n    margin-right: 20px;\n    fill: var(--body-text-color);\n  }\n  .page-list-item span {\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n\n  /* TODO: begin copypasta from IconButton.html */\n\n  :global(.pinnable-button) {\n    background: none;\n    border: none;\n    padding: 6px 10px;\n  }\n\n  :global(.pinnable-button .pinnable-svg) {\n    fill: var(--action-button-fill-color);\n    width: 24px;\n    height: 24px;\n  }\n\n  :global(.pinnable-button:hover .pinnable-svg) {\n    fill: var(--action-button-fill-color-hover);\n  }\n\n  :global(.pinnable-button:active .pinnable-svg) {\n    fill: var(--action-button-fill-color-active);\n  }\n\n  :global(.pinnable-button.checked .pinnable-svg) {\n    fill: var(--action-button-fill-color-pressed);\n  }\n\n  :global(.pinnable-button.checked:hover .pinnable-svg) {\n    fill: var(--action-button-fill-color-pressed-hover);\n  }\n\n  :global(.pinnable-button.checked:active .pinnable-svg) {\n    fill: var(--action-button-fill-color-pressed-active);\n  }\n\n  /* TODO: end copypasta */\n\n  @media (max-width: 767px) {\n    .page-list-item a {\n      padding: 20px 10px;\n    }\n    :global(.page-list-item-svg) {\n      margin-right: 10px;\n    }\n  }\n\n  @media (max-width: 240px) {\n    .page-list-item a {\n      padding: 10px 5px;\n      font-size: 0.9em;\n    }\n    :global(.page-list-item-svg) {\n      margin-right: 5px;\n    }\n    :global(.page-list-item a button.icon-button) {\n      padding: 6px 5px;\n    }\n  }\n\n</style>\n<script>\n  import { store } from '../../_store/store.js'\n  import SvgIcon from '../SvgIcon.html'\n  import RadioGroupButton from '../../_components/radio/RadioGroupButton.html'\n  import { formatIntl } from '../../_utils/formatIntl.js'\n\n  export default {\n    store: () => store,\n    data: () => ({\n      pinnable: false,\n      pinIndex: undefined\n    }),\n    computed: {\n      ariaLabel: ({ label, pinnable, $pinnedPage, href }) => {\n        return formatIntl([[\"label\"],\" \",[\"pinnable\",\"select\",{\"true\":[\" \",[\"pinned\",\"select\",{\"true\":[\"(Pinned page)\"],\"other\":[\"(Unpinned page)\"]}],\" \"],\"other\":[]}]], {\n          label,\n          pinnable,\n          pinned: $pinnedPage === href\n        })\n      },\n      pinLabel: ({ label }) => formatIntl([\"Pin \",[\"label\"]], { label })\n    },\n    components: {\n      SvgIcon,\n      RadioGroupButton\n    },\n    methods: {\n      onPinClick (e) {\n        e.preventDefault()\n        const { currentInstance, pinnedPages } = this.store.get()\n        const { href } = this.get()\n        pinnedPages[currentInstance] = href\n        this.store.set({ pinnedPages })\n        this.store.save()\n      }\n    }\n  }\n</script>\n","{#if $isUserLoggedIn}\n<h1 class=\"sr-only\">Community</h1>\n<div class=\"community-page\">\n  <FocusRestoration realm=\"community\">\n    <RadioGroup\n      id=\"pinnables\"\n      length={numPinnable}\n      label=\"Pinnable timelines\">\n\n      <h2 class=\"community-header\">\n        Timelines\n      </h2>\n\n      <PageList label=\"Timelines\">\n        {#each staticPinnables as staticPinnable, i}\n          <PageListItem href={staticPinnable.href}\n                        label={staticPinnable.label}\n                        icon={staticPinnable.icon}\n                        pinnable=\"true\"\n                        pinIndex={i}\n          />\n        {/each}\n      </PageList>\n\n      {#if listsLength}\n\n        <h2 class=\"community-header\">\n          Lists\n        </h2>\n\n        <PageList label=\"Lists\">\n          {#each $lists as list, i}\n            <PageListItem href=\"/lists/{list.id}\"\n                          label={list.title}\n                          icon=\"#fa-bars\"\n                          pinnable=\"true\"\n                          pinIndex={staticPinnablesLength + i}\n            />\n          {/each}\n        </PageList>\n\n      {/if}\n\n    </RadioGroup>\n\n    <h2 class=\"community-header\">\n      Instance settings\n    </h2>\n\n    <PageList label=\"Instance settings\">\n      {#if isLockedAccount}\n      <PageListItem href=\"/requests\"\n                    label={followRequestsLabel}\n                    icon=\"#fa-user-plus\"\n       />\n      {/if}\n      <PageListItem href=\"/muted\"\n                    label=\"Muted users\"\n                    icon=\"#fa-volume-off\"\n      />\n      <PageListItem href=\"/blocked\"\n                    label=\"Blocked users\"\n                    icon=\"#fa-ban\"\n      />\n      <PageListItem href=\"/pinned\"\n                    label=\"Pinned posts\"\n                    icon=\"#fa-thumb-tack\"\n      />\n    </PageList>\n\n  </FocusRestoration>\n</div>\n{:else}\n<HiddenFromSSR>\n  <FreeTextLayout>\n    <h1>Community</h1>\n\n    <p>Community options appear here when logged in.</p>\n  </FreeTextLayout>\n</HiddenFromSSR>\n<div style=\"display: none\">\n  <!-- TODO: this is just a hack so that `sapper export` knows to crawl these files -->\n  <!-- Note that these links have to be spread out or else they result in ECONNRESET errors during crawling -->\n  <!-- See also search.html -->\n  <a href=\"/requests\">Follow requests</a>\n  <a href=\"/muted\">Muted users</a>\n  <a href=\"/blocked\">Blocked users</a>\n  <a href=\"/pinned\">Pinned posts</a>\n</div>\n{/if}\n<style>\n  .community-page {\n    margin: 20px;\n  }\n  @media (max-width: 767px) {\n    .community-page {\n      margin: 20px 10px;\n    }\n  }\n</style>\n<script>\n  import FreeTextLayout from '../../_components/FreeTextLayout.html'\n  import { store } from '../../_store/store.js'\n  import HiddenFromSSR from '../../_components/HiddenFromSSR.html'\n  import PageList from '../../_components/community/PageList.html'\n  import PageListItem from '../../_components/community/PageListItem.html'\n  import RadioGroup from '../../_components/radio/RadioGroup.html'\n  import { updateListsForInstance } from '../../_actions/lists.js'\n  import { updateFollowRequestCountIfLockedAccount } from '../../_actions/followRequests.js'\n  import FocusRestoration from '../../_components/FocusRestoration.html'\n  import { formatIntl } from '../../_utils/formatIntl.js'\n\n  export default {\n    async oncreate () {\n      const { currentInstance } = this.store.get()\n      if (currentInstance) {\n        await Promise.all([\n          updateListsForInstance(currentInstance),\n          updateFollowRequestCountIfLockedAccount(currentInstance)\n        ])\n      }\n    },\n    store: () => store,\n    components: {\n      FreeTextLayout,\n      HiddenFromSSR,\n      PageList,\n      PageListItem,\n      RadioGroup,\n      FocusRestoration\n    },\n    data: () => ({\n    }),\n    computed: {\n      isLockedAccount: ({ $currentVerifyCredentials }) => $currentVerifyCredentials && $currentVerifyCredentials.locked,\n      followRequestsLabel: ({ $hasFollowRequests, $numberOfFollowRequests }) => (\n        formatIntl([\"Follow requests \",[\"hasFollowRequests\",\"select\",{\"true\":[\"(\",[\"count\"],\")\"],\"other\":[]}]], {\n          hasFollowRequests: $hasFollowRequests,\n          count: $numberOfFollowRequests\n        })\n      ),\n      listsLength: ({ $lists }) => $lists ? $lists.length : 0,\n      staticPinnablesLength: ({ staticPinnables }) => staticPinnables.length,\n      numPinnable: ({ listsLength, staticPinnablesLength }) => listsLength + staticPinnablesLength,\n      staticPinnables: ({ $bubbleTimelineEnabled }) => [\n        {\n          href: '/local',\n          label: \"Local timeline\",\n          icon: '#fa-users'\n        },\n        ...($bubbleTimelineEnabled\n          ? [{\n              href: '/bubble',\n              label: \"Bubble timeline\",\n              icon: '#fa-circle'\n            }]\n          : []),\n        {\n          href: '/federated',\n          label: \"Federated timeline\",\n          icon: '#fa-globe'\n        },\n        {\n          href: '/favorites',\n          label: \"Favorites\",\n          icon: '#fa-star'\n        },\n        {\n          href: '/direct',\n          label: \"Direct messages\",\n          icon: '#fa-envelope'\n        },\n        {\n          href: '/bookmarks',\n          label: \"Bookmarks\",\n          icon: '#fa-bookmark'\n        }\n      ]\n    }\n  }\n</script>\n","<Title name=\"Community\" />\n\n  <LazyPage {pageComponent} {params} />\n\n<script>\n  import Title from '../_components/Title.html'\n  import LazyPage from '../_components/LazyPage.html'\n  import pageComponent from '../_pages/community/index.html'\n\n  export default {\n    components: {\n\n      Title,\n      LazyPage\n    },\n    data: () => ({\n      pageComponent\n    })\n  }\n</script>\n","import { store } from '../_store/store.js'\nimport { cacheFirstUpdateAfter } from '../_utils/sync.js'\nimport { database } from '../_database/database.js'\nimport { getFollowRequests } from '../_api/followRequests.js'\nimport { get } from '../_utils/lodash-lite.js'\n\nexport async function updateFollowRequestCountIfLockedAccount (instanceName) {\n  const { verifyCredentials, loggedInInstances } = store.get()\n\n  if (!get(verifyCredentials, [instanceName, 'locked'])) {\n    return\n  }\n\n  const accessToken = loggedInInstances[instanceName].access_token\n\n  await cacheFirstUpdateAfter(\n    async () => (await getFollowRequests(instanceName, accessToken)).length,\n    () => database.getFollowRequestCount(instanceName),\n    followReqsCount => database.setFollowRequestCount(instanceName, followReqsCount),\n    followReqsCount => {\n      const { followRequestCounts } = store.get()\n      followRequestCounts[instanceName] = followReqsCount\n      store.set({ followRequestCounts })\n    }\n  )\n}\n","import { store } from '../_store/store.js'\nimport { getLists } from '../_api/lists.js'\nimport { cacheFirstUpdateAfter, cacheFirstUpdateOnlyIfNotInCache } from '../_utils/sync.js'\nimport { database } from '../_database/database.js'\n\nasync function syncLists (instanceName, syncMethod) {\n  const { loggedInInstances } = store.get()\n  const accessToken = loggedInInstances[instanceName].access_token\n\n  await syncMethod(\n    () => getLists(instanceName, accessToken),\n    () => database.getLists(instanceName),\n    lists => database.setLists(instanceName, lists),\n    lists => {\n      const { instanceLists } = store.get()\n      instanceLists[instanceName] = lists\n      store.set({ instanceLists })\n    }\n  )\n}\n\nexport async function updateListsForInstance (instanceName) {\n  await syncLists(instanceName, cacheFirstUpdateAfter)\n}\n\nexport async function setupListsForInstance (instanceName) {\n  await syncLists(instanceName, cacheFirstUpdateOnlyIfNotInCache)\n}\n","import { get, DEFAULT_TIMEOUT, post, WRITE_TIMEOUT } from '../_utils/ajax.js'\nimport { auth, basename } from './utils.js'\n\nexport function getLists (instanceName, accessToken) {\n  const url = `${basename(instanceName)}/api/v1/lists`\n  return get(url, auth(accessToken), { timeout: DEFAULT_TIMEOUT })\n}\n\nexport function createList (instanceName, accessToken, title) {\n  const url = `${basename(instanceName)}/api/v1/lists`\n  return post(url, { title }, auth(accessToken), { timeout: WRITE_TIMEOUT })\n}\n","import { DEFAULT_TIMEOUT, get, post, WRITE_TIMEOUT, paramsString } from '../_utils/ajax.js'\nimport { auth, basename } from './utils.js'\n\nexport async function getFollowRequests (instanceName, accessToken, limit = 80) {\n  let url = `${basename(instanceName)}/api/v1/follow_requests`\n  url += '?' + paramsString({ limit })\n  return get(url, auth(accessToken), { timeout: DEFAULT_TIMEOUT })\n}\n\nexport async function authorizeFollowRequest (instanceName, accessToken, id) {\n  const url = `${basename(instanceName)}/api/v1/follow_requests/${id}/authorize`\n  return post(url, null, auth(accessToken), { timeout: WRITE_TIMEOUT })\n}\n\nexport async function rejectFollowRequest (instanceName, accessToken, id) {\n  const url = `${basename(instanceName)}/api/v1/follow_requests/${id}/reject`\n  return post(url, null, auth(accessToken), { timeout: WRITE_TIMEOUT })\n}\n"],"names":["label","onPinClick","e","preventDefault","currentInstance","pinnedPages","this","store","get","href","set","save","$pinnedPage","pinLabel","pinIndex","event","pinnable","undefined","icon","ariaLabel","formatIntl","pinned","Promise","all","staticPinnables","numPinnable","listsLength","isLockedAccount","staticPinnable","i","$lists","list","id","title","staticPinnablesLength","followRequestsLabel","$isUserLoggedIn","$currentVerifyCredentials","locked","$hasFollowRequests","$numberOfFollowRequests","hasFollowRequests","count","length","$bubbleTimelineEnabled","pageComponent","params","async","updateFollowRequestCountIfLockedAccount","instanceName","verifyCredentials","loggedInInstances","accessToken","access_token","getFollowRequestCount","followReqsCount","setFollowRequestCount","followRequestCounts","syncLists","syncMethod","url","timeout","getLists","database","lists","setLists","instanceLists","updateListsForInstance","setupListsForInstance","getFollowRequests","limit"],"sourceRoot":""}