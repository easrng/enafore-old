{"version":3,"file":"9090.da890e210f0733033237.9090.js","mappings":"qGAAO,MAAMA,EAA0B,IAAM,wIAE3CC,MAAKC,GAAOA,EAAIC,S,gDCElB,MAAM,aAAEC,GAAiB,EAElB,MAAMC,UAAiBD,EAC5B,WAAAE,CAAaC,EAAU,CAAC,GAEtB,GADAC,UACMD,EAAQE,SAAWF,EAAQE,QAAU,GACzC,MAAM,IAAIC,UAAU,6CAGtBC,KAAKF,QAAUF,EAAQE,QACvBE,KAAKC,MAAQ,IAAIC,IACjBF,KAAKG,SAAW,IAAID,IACpBF,KAAKI,MAAQ,CACf,CAEA,IAAAC,CAAMC,EAAKC,GAIT,GAHAP,KAAKC,MAAMO,IAAIF,EAAKC,GACpBP,KAAKI,QAEDJ,KAAKI,OAASJ,KAAKF,QAAS,CAE9B,GADAE,KAAKI,MAAQ,EACTJ,KAAKS,cAAc,SACrB,IAAK,MAAMH,KAAON,KAAKG,SAASO,OACzBV,KAAKC,MAAMU,IAAIL,IAClBN,KAAKY,KAAK,QAASZ,KAAKG,SAASU,IAAIP,GAAMA,GAIjDN,KAAKG,SAAWH,KAAKC,MACrBD,KAAKC,MAAQ,IAAIC,GACnB,CACF,CAEA,GAAAW,CAAKP,GACH,GAAIN,KAAKC,MAAMU,IAAIL,GACjB,OAAON,KAAKC,MAAMY,IAAIP,GAGxB,GAAIN,KAAKG,SAASQ,IAAIL,GAAM,CAC1B,MAAMC,EAAQP,KAAKG,SAASU,IAAIP,GAGhC,OAFAN,KAAKG,SAASW,OAAOR,GACrBN,KAAKK,KAAKC,EAAKC,GACRA,CACT,CACF,CAEA,GAAAC,CAAKF,EAAKC,GAOR,OANIP,KAAKC,MAAMU,IAAIL,GACjBN,KAAKC,MAAMO,IAAIF,EAAKC,GAEpBP,KAAKK,KAAKC,EAAKC,GAGVP,IACT,CAEA,GAAAW,CAAKL,GACH,OAAON,KAAKC,MAAMU,IAAIL,IAAQN,KAAKG,SAASQ,IAAIL,EAClD,CAaA,OAAQA,GACN,MAAMS,EAAUf,KAAKC,MAAMa,OAAOR,GAKlC,OAJIS,GACFf,KAAKI,QAGAJ,KAAKG,SAASW,OAAOR,IAAQS,CACtC,CAEA,KAAAC,GACEhB,KAAKC,MAAMe,QACXhB,KAAKG,SAASa,QACdhB,KAAKI,MAAQ,CACf,CAEA,UAAAa,GACE,MAAMT,EAAM,IAAIU,IAChB,IAAK,MAAMZ,KAAON,KAAKC,MAAMS,OAC3BF,EAAIW,IAAIb,GAEV,IAAK,MAAMA,KAAON,KAAKG,SAASO,OAC9BF,EAAIW,IAAIb,GAEV,OAAOE,CACT,E","sources":["webpack:///./src/routes/_components/dialog/asyncDialogs/importShowComposeDialog.js","webpack:///./src/routes/_thirdparty/quick-lru/quick-lru.js"],"sourcesContent":["export const importShowComposeDialog = () => import(\n  '../creators/showComposeDialog.js'\n).then(mod => mod.default)\n","// Forked from https://github.com/sindresorhus/quick-lru/blob/16d15d470a8eb87c2a7dd5b80892d9b74f1acd3c/index.js\n// Adds the ability to listen for 'evict' events using an EventEmitter, also removes some unused code\n\nimport eventsLightPackage from 'events-light'\nconst { EventEmitter } = eventsLightPackage\n\nexport class QuickLRU extends EventEmitter {\n  constructor (options = {}) {\n    super()\n    if (!(options.maxSize && options.maxSize > 0)) {\n      throw new TypeError('`maxSize` must be a number greater than 0')\n    }\n\n    this.maxSize = options.maxSize\n    this.cache = new Map()\n    this.oldCache = new Map()\n    this._size = 0\n  }\n\n  _set (key, value) {\n    this.cache.set(key, value)\n    this._size++\n\n    if (this._size >= this.maxSize) {\n      this._size = 0\n      if (this.listenerCount('evict')) {\n        for (const key of this.oldCache.keys()) {\n          if (!this.cache.has(key)) {\n            this.emit('evict', this.oldCache.get(key), key)\n          }\n        }\n      }\n      this.oldCache = this.cache\n      this.cache = new Map()\n    }\n  }\n\n  get (key) {\n    if (this.cache.has(key)) {\n      return this.cache.get(key)\n    }\n\n    if (this.oldCache.has(key)) {\n      const value = this.oldCache.get(key)\n      this.oldCache.delete(key)\n      this._set(key, value)\n      return value\n    }\n  }\n\n  set (key, value) {\n    if (this.cache.has(key)) {\n      this.cache.set(key, value)\n    } else {\n      this._set(key, value)\n    }\n\n    return this\n  }\n\n  has (key) {\n    return this.cache.has(key) || this.oldCache.has(key)\n  }\n\n  // unused\n  // peek (key) {\n  //   if (this.cache.has(key)) {\n  //     return this.cache.get(key)\n  //   }\n  //\n  //   if (this.oldCache.has(key)) {\n  //     return this.oldCache.get(key)\n  //   }\n  // }\n\n  delete (key) {\n    const deleted = this.cache.delete(key)\n    if (deleted) {\n      this._size--\n    }\n\n    return this.oldCache.delete(key) || deleted\n  }\n\n  clear () {\n    this.cache.clear()\n    this.oldCache.clear()\n    this._size = 0\n  }\n\n  getAllKeys () {\n    const set = new Set()\n    for (const key of this.cache.keys()) {\n      set.add(key)\n    }\n    for (const key of this.oldCache.keys()) {\n      set.add(key)\n    }\n    return set\n  }\n\n  // unused\n  // * keys() {\n  //   for (const [key] of this) {\n  //     yield key;\n  //   }\n  // }\n  //\n  // * values() {\n  //   for (const [, value] of this) {\n  //     yield value;\n  //   }\n  // }\n  //\n  // * [Symbol.iterator]() {\n  //   for (const item of this.cache) {\n  //     yield item;\n  //   }\n  //\n  //   for (const item of this.oldCache) {\n  //     const [key] = item;\n  //     if (!this.cache.has(key)) {\n  //       yield item;\n  //     }\n  //   }\n  // }\n  //\n  // get size () {\n  //   let oldCacheSize = 0\n  //   for (const key of this.oldCache.keys()) {\n  //     if (!this.cache.has(key)) {\n  //       oldCacheSize++\n  //     }\n  //   }\n  //\n  //   return this._size + oldCacheSize\n  // }\n}\n"],"names":["importShowComposeDialog","then","mod","default","EventEmitter","QuickLRU","constructor","options","super","maxSize","TypeError","this","cache","Map","oldCache","_size","_set","key","value","set","listenerCount","keys","has","emit","get","delete","deleted","clear","getAllKeys","Set","add"],"sourceRoot":""}