{"version":3,"file":"5403.8da7b63ed6ff5711c25c.5403.js","mappings":"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","sources":["webpack:///./node_modules/is-electron/index.js","webpack:///./node_modules/tesseract.js/src/constants/OEM.js","webpack:///./node_modules/tesseract.js/src/constants/config.js","webpack:///./node_modules/tesseract.js/src/constants/defaultOptions.js","webpack:///./node_modules/tesseract.js/src/createJob.js","webpack:///./node_modules/tesseract.js/src/createWorker.js","webpack:///./node_modules/tesseract.js/src/utils/circularize.js","webpack:///./node_modules/tesseract.js/src/utils/getEnvironment.js","webpack:///./node_modules/tesseract.js/src/utils/getId.js","webpack:///./node_modules/tesseract.js/src/utils/log.js","webpack:///./node_modules/tesseract.js/src/utils/resolvePaths.js","webpack:///./node_modules/tesseract.js/src/worker/browser/defaultOptions.js","webpack:///./node_modules/tesseract.js/src/worker/browser/index.js","webpack:///./node_modules/tesseract.js/src/worker/browser/loadImage.js","webpack:///./node_modules/tesseract.js/src/worker/browser/onMessage.js","webpack:///./node_modules/tesseract.js/src/worker/browser/send.js","webpack:///./node_modules/tesseract.js/src/worker/browser/spawnWorker.js","webpack:///./node_modules/tesseract.js/src/worker/browser/terminateWorker.js","webpack:///./node_modules/tesseract.js-core/tesseract-core.wasm.js","webpack:///./node_modules/tesseract.js/dist/worker.min.js","webpack:///./src/routes/_utils/tesseractWorker.js"],"sourcesContent":["// https://github.com/electron/electron/issues/2288\nfunction isElectron() {\n    // Renderer process\n    if (typeof window !== 'undefined' && typeof window.process === 'object' && window.process.type === 'renderer') {\n        return true;\n    }\n\n    // Main process\n    if (typeof process !== 'undefined' && typeof process.versions === 'object' && !!process.versions.electron) {\n        return true;\n    }\n\n    // Detect the user agent when the `nodeIntegration` option is set to false\n    if (typeof navigator === 'object' && typeof navigator.userAgent === 'string' && navigator.userAgent.indexOf('Electron') >= 0) {\n        return true;\n    }\n\n    return false;\n}\n\nmodule.exports = isElectron;\n","/*\n * OEM = OCR Engine Mode, and there are 4 possible modes.\n *\n * By default tesseract.js uses LSTM_ONLY mode.\n *\n */\nmodule.exports = {\n  TESSERACT_ONLY: 0,\n  LSTM_ONLY: 1,\n  TESSERACT_LSTM_COMBINED: 2,\n  DEFAULT: 3,\n};\n","const OEM = require('./OEM');\n\nmodule.exports = {\n  defaultOEM: OEM.DEFAULT,\n};\n","module.exports = {\n  /*\n   * default path for downloading *.traineddata\n   */\n  langPath: 'https://tessdata.projectnaptha.com/4.0.0',\n  /*\n   * Use BlobURL for worker script by default\n   * TODO: remove this option\n   *\n   */\n  workerBlobURL: true,\n  logger: () => {},\n};\n","const getId = require('./utils/getId');\n\nlet jobCounter = 0;\n\nmodule.exports = ({\n  id: _id,\n  action,\n  payload = {},\n}) => {\n  let id = _id;\n  if (typeof id === 'undefined') {\n    id = getId('Job', jobCounter);\n    jobCounter += 1;\n  }\n\n  return {\n    id,\n    action,\n    payload,\n  };\n};\n","const resolvePaths = require('./utils/resolvePaths');\nconst circularize = require('./utils/circularize');\nconst createJob = require('./createJob');\nconst { log } = require('./utils/log');\nconst getId = require('./utils/getId');\nconst { defaultOEM } = require('./constants/config');\nconst {\n  defaultOptions,\n  spawnWorker,\n  terminateWorker,\n  onMessage,\n  loadImage,\n  send,\n} = require('./worker/node');\n\nlet workerCounter = 0;\n\nmodule.exports = async (_options = {}) => {\n  const id = getId('Worker', workerCounter);\n  const {\n    logger,\n    errorHandler,\n    ...options\n  } = resolvePaths({\n    ...defaultOptions,\n    ..._options,\n  });\n  const resolves = {};\n  const rejects = {};\n\n  let workerResReject;\n  let workerResResolve;\n  const workerRes = new Promise((resolve, reject) => {\n    workerResResolve = resolve;\n    workerResReject = reject;\n  });\n  const workerError = (event) => { workerResReject(event.message); };\n\n  let worker = spawnWorker(options);\n  worker.onerror = workerError;\n\n  workerCounter += 1;\n\n  const setResolve = (action, res) => {\n    resolves[action] = res;\n  };\n\n  const setReject = (action, rej) => {\n    rejects[action] = rej;\n  };\n\n  const startJob = ({ id: jobId, action, payload }) => (\n    new Promise((resolve, reject) => {\n      log(`[${id}]: Start ${jobId}, action=${action}`);\n      setResolve(action, resolve);\n      setReject(action, reject);\n      send(worker, {\n        workerId: id,\n        jobId,\n        action,\n        payload,\n      });\n    })\n  );\n\n  const load = () => (\n    console.warn('`load` is depreciated and should be removed from code (workers now come pre-loaded)')\n  );\n\n  const loadInternal = (jobId) => (\n    startJob(createJob({\n      id: jobId, action: 'load', payload: { options },\n    }))\n  );\n\n  const writeText = (path, text, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: { method: 'writeFile', args: [path, text] },\n    }))\n  );\n\n  const readText = (path, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: { method: 'readFile', args: [path, { encoding: 'utf8' }] },\n    }))\n  );\n\n  const removeFile = (path, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: { method: 'unlink', args: [path] },\n    }))\n  );\n\n  const FS = (method, args, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: { method, args },\n    }))\n  );\n\n  const loadLanguage = (langs = 'eng', jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'loadLanguage',\n      payload: { langs, options },\n    }))\n  );\n\n  const initialize = (langs = 'eng', oem = defaultOEM, config, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'initialize',\n      payload: { langs, oem, config },\n    }))\n  );\n\n  const setParameters = (params = {}, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'setParameters',\n      payload: { params },\n    }))\n  );\n\n  const recognize = async (image, opts = {}, output = {\n    blocks: true, text: true, hocr: true, tsv: true,\n  }, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'recognize',\n      payload: { image: await loadImage(image), options: opts, output },\n    }))\n  );\n\n  const getPDF = (title = 'Tesseract OCR Result', textonly = false, jobId) => {\n    console.log('`getPDF` function is depreciated. `recognize` option `savePDF` should be used instead.');\n    return startJob(createJob({\n      id: jobId,\n      action: 'getPDF',\n      payload: { title, textonly },\n    }));\n  };\n\n  const detect = async (image, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'detect',\n      payload: { image: await loadImage(image) },\n    }))\n  );\n\n  const terminate = async () => {\n    if (worker !== null) {\n      /*\n      await startJob(createJob({\n        id: jobId,\n        action: 'terminate',\n      }));\n      */\n      terminateWorker(worker);\n      worker = null;\n    }\n    return Promise.resolve();\n  };\n\n  onMessage(worker, ({\n    workerId, jobId, status, action, data,\n  }) => {\n    if (status === 'resolve') {\n      log(`[${workerId}]: Complete ${jobId}`);\n      let d = data;\n      if (action === 'recognize') {\n        d = circularize(data);\n      } else if (action === 'getPDF') {\n        d = Array.from({ ...data, length: Object.keys(data).length });\n      }\n      resolves[action]({ jobId, data: d });\n    } else if (status === 'reject') {\n      rejects[action](data);\n      if (action === 'load') workerResReject(data);\n      if (errorHandler) {\n        errorHandler(data);\n      } else {\n        throw Error(data);\n      }\n    } else if (status === 'progress') {\n      logger({ ...data, userJobId: jobId });\n    }\n  });\n\n  const resolveObj = {\n    id,\n    worker,\n    setResolve,\n    setReject,\n    load,\n    writeText,\n    readText,\n    removeFile,\n    FS,\n    loadLanguage,\n    initialize,\n    setParameters,\n    recognize,\n    getPDF,\n    detect,\n    terminate,\n  };\n\n  loadInternal().then(() => workerResResolve(resolveObj)).catch(() => {});\n\n  return workerRes;\n};\n","/**\n * In the recognition result of tesseract, there\n * is a deep JSON object for details, it has around\n *\n * The result of dump.js is a big JSON tree\n * which can be easily serialized (for instance\n * to be sent from a webworker to the main app\n * or through Node's IPC), but we want\n * a (circular) DOM-like interface for walking\n * through the data.\n *\n * @fileoverview DOM-like interface for walking through data\n * @author Kevin Kwok <antimatter15@gmail.com>\n * @author Guillermo Webster <gui@mit.edu>\n * @author Jerome Wu <jeromewus@gmail.com>\n */\n\nmodule.exports = (page) => {\n  const blocks = [];\n  const paragraphs = [];\n  const lines = [];\n  const words = [];\n  const symbols = [];\n\n  if (page.blocks) {\n    page.blocks.forEach((block) => {\n      block.paragraphs.forEach((paragraph) => {\n        paragraph.lines.forEach((line) => {\n          line.words.forEach((word) => {\n            word.symbols.forEach((sym) => {\n              symbols.push({\n                ...sym, page, block, paragraph, line, word,\n              });\n            });\n            words.push({\n              ...word, page, block, paragraph, line,\n            });\n          });\n          lines.push({\n            ...line, page, block, paragraph,\n          });\n        });\n        paragraphs.push({\n          ...paragraph, page, block,\n        });\n      });\n      blocks.push({\n        ...block, page,\n      });\n    });\n  }\n\n  return {\n    ...page, blocks, paragraphs, lines, words, symbols,\n  };\n};\n","const isElectron = require('is-electron');\n\nmodule.exports = (key) => {\n  const env = {};\n\n  if (typeof WorkerGlobalScope !== 'undefined') {\n    env.type = 'webworker';\n  } else if (isElectron()) {\n    env.type = 'electron';\n  } else if (typeof window === 'object') {\n    env.type = 'browser';\n  } else if (typeof process === 'object' && typeof require === 'function') {\n    env.type = 'node';\n  }\n\n  if (typeof key === 'undefined') {\n    return env;\n  }\n\n  return env[key];\n};\n","module.exports = (prefix, cnt) => (\n  `${prefix}-${cnt}-${Math.random().toString(16).slice(3, 8)}`\n);\n","let logging = false;\n\nexports.logging = logging;\n\nexports.setLogging = (_logging) => {\n  logging = _logging;\n};\n\nexports.log = (...args) => (logging ? console.log.apply(this, args) : null);\n","const isBrowser = require('./getEnvironment')('type') === 'browser';\n\nconst resolveURL = isBrowser ? s => (new URL(s, window.location.href)).href : s => s; // eslint-disable-line\n\nmodule.exports = (options) => {\n  const opts = { ...options };\n  ['corePath', 'workerPath', 'langPath'].forEach((key) => {\n    if (options[key]) {\n      opts[key] = resolveURL(opts[key]);\n    }\n  });\n  return opts;\n};\n","const resolveURL = (s) => (new URL(s, window.location.href)).href;\nconst { version } = require('../../../package.json');\nconst defaultOptions = require('../../constants/defaultOptions');\n\n/*\n * Default options for browser worker\n */\nmodule.exports = {\n  ...defaultOptions,\n  workerPath: (typeof process !== 'undefined' && process.env.TESS_ENV === 'development')\n    ? resolveURL(`/dist/worker.dev.js?nocache=${Math.random().toString(36).slice(3)}`)\n    : `https://cdn.jsdelivr.net/npm/tesseract.js@v${version}/dist/worker.min.js`,\n  /*\n   * If browser doesn't support WebAssembly,\n   * load ASM version instead\n   */\n  corePath: null,\n};\n","/**\n *\n * Tesseract Worker adapter for browser\n *\n * @fileoverview Tesseract Worker adapter for browser\n * @author Kevin Kwok <antimatter15@gmail.com>\n * @author Guillermo Webster <gui@mit.edu>\n * @author Jerome Wu <jeromewus@gmail.com>\n */\nconst defaultOptions = require('./defaultOptions');\nconst spawnWorker = require('./spawnWorker');\nconst terminateWorker = require('./terminateWorker');\nconst onMessage = require('./onMessage');\nconst send = require('./send');\nconst loadImage = require('./loadImage');\n\nmodule.exports = {\n  defaultOptions,\n  spawnWorker,\n  terminateWorker,\n  onMessage,\n  send,\n  loadImage,\n};\n","/**\n * readFromBlobOrFile\n *\n * @name readFromBlobOrFile\n * @function\n * @access private\n */\nconst readFromBlobOrFile = (blob) => (\n  new Promise((resolve, reject) => {\n    const fileReader = new FileReader();\n    fileReader.onload = () => {\n      resolve(fileReader.result);\n    };\n    fileReader.onerror = ({ target: { error: { code } } }) => {\n      reject(Error(`File could not be read! Code=${code}`));\n    };\n    fileReader.readAsArrayBuffer(blob);\n  })\n);\n\n/**\n * loadImage\n *\n * @name loadImage\n * @function load image from different source\n * @access private\n */\nconst loadImage = async (image) => {\n  let data = image;\n  if (typeof image === 'undefined') {\n    return 'undefined';\n  }\n\n  if (typeof image === 'string') {\n    // Base64 Image\n    if (/data:image\\/([a-zA-Z]*);base64,([^\"]*)/.test(image)) {\n      data = atob(image.split(',')[1])\n        .split('')\n        .map((c) => c.charCodeAt(0));\n    } else {\n      const resp = await fetch(image);\n      data = await resp.arrayBuffer();\n    }\n  } else if (typeof HTMLElement !== 'undefined' && image instanceof HTMLElement) {\n    if (image.tagName === 'IMG') {\n      data = await loadImage(image.src);\n    }\n    if (image.tagName === 'VIDEO') {\n      data = await loadImage(image.poster);\n    }\n    if (image.tagName === 'CANVAS') {\n      await new Promise((resolve) => {\n        image.toBlob(async (blob) => {\n          data = await readFromBlobOrFile(blob);\n          resolve();\n        });\n      });\n    }\n  } else if (typeof OffscreenCanvas !== 'undefined' && image instanceof OffscreenCanvas) {\n    const blob = await image.convertToBlob();\n    data = await readFromBlobOrFile(blob);\n  } else if (image instanceof File || image instanceof Blob) {\n    data = await readFromBlobOrFile(image);\n  }\n\n  return new Uint8Array(data);\n};\n\nmodule.exports = loadImage;\n","module.exports = (worker, handler) => {\n  worker.onmessage = ({ data }) => { // eslint-disable-line\n    handler(data);\n  };\n};\n","/**\n * send\n *\n * @name send\n * @function send packet to worker and create a job\n * @access public\n */\nmodule.exports = async (worker, packet) => {\n  worker.postMessage(packet);\n};\n","/**\n * spawnWorker\n *\n * @name spawnWorker\n * @function create a new Worker in browser\n * @access public\n */\nmodule.exports = ({ workerPath, workerBlobURL }) => {\n  let worker;\n  if (Blob && URL && workerBlobURL) {\n    const blob = new Blob([`importScripts(\"${workerPath}\");`], {\n      type: 'application/javascript',\n    });\n    worker = new Worker(URL.createObjectURL(blob));\n  } else {\n    worker = new Worker(workerPath);\n  }\n\n  return worker;\n};\n","/**\n * terminateWorker\n *\n * @name terminateWorker\n * @function terminate worker\n * @access public\n */\nmodule.exports = (worker) => {\n  worker.terminate();\n};\n","export default __webpack_public_path__ + \"tesseract-asset.70a423b725ea6ea392236a3212ac5e17.tesseract-core.wasm.js\";","export default __webpack_public_path__ + \"tesseract-asset.133ae9a2b0c8ce1398683356ce046587.worker.min.js\";","// TODO: we should use .wasm instead of .wasm.js. But currently can't because:\n// 1. not supported https://github.com/naptha/tesseract.js/issues/282#issuecomment-492263336\n// 2. webpack defaultRules issues (fixable with https://github.com/webpack/webpack/issues/8412#issuecomment-445586591)\n// We should explore this at a later date.\nimport corePath from 'tesseract.js-core/tesseract-core.wasm.js'\nimport workerPath from 'tesseract.js/dist/worker.min.js'\nimport createWorker from 'tesseract.js/src/createWorker.js'\n\nconst { origin } = location\n\nexport default async () => await createWorker({\n  workerPath: `${origin}/${workerPath}`,\n  langPath: `${origin}/`,\n  corePath: `${origin}/${corePath}`,\n  cacheMethod: 'none', // this file is 23.4MB ungzipped, so store in service worker instead (11MB gzipped)\n  workerBlobURL: false,\n  logger: message => {\n    console.log(message)\n  }\n})\n"],"names":["module","exports","window","process","type","versions","electron","navigator","userAgent","indexOf","TESSERACT_ONLY","LSTM_ONLY","TESSERACT_LSTM_COMBINED","DEFAULT","OEM","defaultOEM","langPath","workerBlobURL","logger","getId","jobCounter","id","_id","action","payload","resolvePaths","circularize","createJob","log","defaultOptions","spawnWorker","terminateWorker","onMessage","loadImage","send","workerCounter","async","_options","errorHandler","options","resolves","rejects","workerResReject","workerResResolve","workerRes","Promise","resolve","reject","worker","onerror","event","message","setResolve","res","setReject","rej","startJob","jobId","workerId","status","data","d","Array","from","length","Object","keys","Error","userJobId","resolveObj","load","console","warn","writeText","path","text","method","args","readText","encoding","removeFile","FS","loadLanguage","langs","initialize","oem","config","setParameters","params","recognize","image","opts","output","blocks","hocr","tsv","getPDF","title","textonly","detect","terminate","then","catch","page","paragraphs","lines","words","symbols","forEach","block","paragraph","line","word","sym","push","isElectron","key","env","WorkerGlobalScope","prefix","cnt","Math","random","toString","slice","logging","setLogging","_logging","apply","this","resolveURL","s","URL","location","href","version","workerPath","TESS_ENV","corePath","readFromBlobOrFile","blob","fileReader","FileReader","onload","result","target","error","code","readAsArrayBuffer","test","atob","split","map","c","charCodeAt","resp","fetch","arrayBuffer","HTMLElement","tagName","src","poster","toBlob","OffscreenCanvas","convertToBlob","File","Blob","Uint8Array","handler","onmessage","packet","postMessage","Worker","createObjectURL","origin","createWorker","cacheMethod"],"sourceRoot":""}