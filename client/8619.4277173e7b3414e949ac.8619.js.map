{"version":3,"file":"8619.4277173e7b3414e949ac.8619.js","mappings":"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","sources":["webpack:///./src/routes/_utils/fullscreen.js","webpack:///./src/routes/_components/virtualList/VirtualListContainer.html","webpack:///./src/routes/_components/virtualList/VirtualListItem.html","webpack:///./src/routes/_utils/queueMicrotask.js","webpack:///./src/routes/_components/virtualList/VirtualListLazyItem.html","webpack:///./src/routes/_utils/createPriorityQueue.js","webpack:///./src/routes/_components/virtualList/VirtualListFooter.html","webpack:///./src/routes/_components/virtualList/VirtualListHeader.html","webpack:///./src/routes/_components/virtualList/VirtualList.html","webpack:///./src/routes/_utils/userAgent/isMobile.js"],"sourcesContent":["export const isFullscreen = () => !!(document.fullscreenElement ||\n  document.webkitFullscreenElement ||\n  document.mozFullScreenElement)\n\nexport const attachFullscreenListener = (listener) => {\n  if ('onfullscreenchange' in document) {\n    document.addEventListener('fullscreenchange', listener)\n  } else if ('onwebkitfullscreenchange' in document) {\n    document.addEventListener('webkitfullscreenchange', listener)\n  } else if ('onmozfullscreenchange' in document) {\n    document.addEventListener('mozfullscreenchange', listener)\n  }\n}\n\nexport const detachFullscreenListener = (listener) => {\n  if ('onfullscreenchange' in document) {\n    document.removeEventListener('fullscreenchange', listener)\n  } else if ('onwebkitfullscreenchange' in document) {\n    document.removeEventListener('webkitfullscreenchange', listener)\n  } else if ('onmozfullscreenchange' in document) {\n    document.removeEventListener('mozfullscreenchange', listener)\n  }\n}\n","<slot></slot>\n<script>\n  import { virtualListStore } from './virtualListStore.js'\n  import { throttle } from '../../_thirdparty/lodash/timers.js'\n  import { isFullscreen, attachFullscreenListener, detachFullscreenListener } from '../../_utils/fullscreen.js'\n  import { mark, stop } from '../../_utils/marks.js'\n  import { doubleRAF } from '../../_utils/doubleRAF.js'\n  import { observe } from 'svelte-extras'\n  import {\n    addScrollListener,\n    removeScrollListener,\n    getScrollContainer,\n    getOffsetHeight\n  } from '../../_utils/scrollContainer.js'\n  import { registerResizeListener, unregisterResizeListener } from '../../_utils/resize.js'\n\n  const SCROLL_EVENT_DELAY = 300\n\n  export default {\n    oncreate () {\n      mark('onCreate VirtualListContainer')\n      const {\n        realm\n      } = this.get()\n      this.store.setCurrentRealm(realm)\n      this.setupScroll()\n      this.setupFullscreen()\n      this.onResize = this.onResize.bind(this)\n      const { scrollTop } = this.store.get()\n      const scrollContainer = getScrollContainer()\n      if (scrollTop > 0) {\n        this.observe('allVisibleItemsHaveHeight', allVisibleItemsHaveHeight => {\n          console.log('allVisibleItemsHaveHeight', allVisibleItemsHaveHeight)\n          const { initializedScrollTop } = this.get()\n          if (!initializedScrollTop && allVisibleItemsHaveHeight) {\n            this.set({ initializedScrollTop: true })\n            requestAnimationFrame(() => {\n              mark('set scrollTop')\n              console.log('forcing scroll top to ', scrollTop)\n              scrollContainer.scrollTop = scrollTop\n              stop('set scrollTop')\n              doubleRAF(() => {\n                console.log('initialized VirtualList (1)')\n                this.fire('initialized')\n              })\n            })\n          }\n        })\n      } else {\n        this.fire('noNeedToScroll')\n        this.observe('allVisibleItemsHaveHeight', allVisibleItemsHaveHeight => {\n          if (allVisibleItemsHaveHeight) {\n            console.log('initialized VirtualList (2)')\n            this.fire('initialized')\n          }\n        })\n        this.onResize()\n      }\n      registerResizeListener(this.onResize)\n      stop('onCreate VirtualListContainer')\n    },\n    ondestroy () {\n      this.teardownScroll()\n      this.teardownFullscreen()\n      this.store.setCurrentRealm(null)\n      unregisterResizeListener(this.onResize)\n    },\n    store: () => virtualListStore,\n    methods: {\n      observe,\n      setupScroll () {\n        this.scrollListener = throttle(event => {\n          const { fullscreen } = this.get()\n          if (fullscreen) {\n            return\n          }\n          this.onScroll()\n        }, SCROLL_EVENT_DELAY, {\n          leading: true,\n          trailing: true\n        })\n        addScrollListener(this.scrollListener)\n      },\n      teardownScroll () {\n        removeScrollListener(this.scrollListener)\n      },\n      setupFullscreen () {\n        this.onFullscreenChange = this.onFullscreenChange.bind(this)\n        attachFullscreenListener(this.onFullscreenChange)\n      },\n      teardownFullscreen () {\n        detachFullscreenListener(this.onFullscreenChange)\n      },\n      onScroll () {\n        const { scrollTop, scrollHeight } = getScrollContainer()\n\n        doubleRAF(() => {\n          mark('onScroll -> setForRealm()')\n          this.store.setForRealm({ scrollTop, scrollHeight })\n          stop('onScroll -> setForRealm()')\n        })\n      },\n      onFullscreenChange () {\n        mark('onFullscreenChange')\n        console.log('is fullscreen? ', isFullscreen())\n        this.set({ fullscreen: isFullscreen() })\n        stop('onFullscreenChange')\n      },\n      onResize () {\n        this.store.setForRealm({\n          scrollHeight: getScrollContainer().scrollHeight,\n          offsetHeight: getOffsetHeight()\n        })\n      }\n    },\n    computed: {\n      // TODO: bug in svelte/store – the observer in oncreate() never get removed without this hack\n      allVisibleItemsHaveHeight: ({ $allVisibleItemsHaveHeight }) => $allVisibleItemsHaveHeight\n    }\n  }\n</script>\n","<div class=\"virtual-list-item list-item {shown ? 'shown' : ''}\"\n     aria-hidden={!shown}\n     ref:node\n     style=\"top: {offset}px;\" >\n  <svelte:component this={component}\n              virtualProps={props}\n              virtualIndex={index}\n              virtualLength={$length}\n              virtualKey={key}\n              on:recalculateHeight=\"doRecalculateHeight()\"/>\n</div>\n<style>\n  .virtual-list-item {\n    position: absolute;\n    width: 100%;\n    opacity: 0;\n    pointer-events: none;\n    transition: opacity 0.2s linear;\n    contain: content; /* see https://www.w3.org/TR/2018/CR-css-contain-1-20181108/#valdef-contain-content */\n  }\n  .virtual-list-item.shown {\n    opacity: 1;\n    pointer-events: auto;\n  }\n</style>\n<script>\n  import { virtualListStore } from './virtualListStore.js'\n  import { registerResizeListener, unregisterResizeListener } from '../../_utils/resize.js'\n  import { mark, stop } from '../../_utils/marks.js'\n  import { requestPostAnimationFrame } from '../../_utils/requestPostAnimationFrame.js'\n  import { observe } from 'svelte-extras'\n  import { doubleRAF } from '../../_utils/doubleRAF.js'\n\n  export default {\n    oncreate () {\n      const { key } = this.get()\n      const node = this.refs.node\n      requestPostAnimationFrame(() => {\n        if (!node || !key) {\n          return\n        }\n        mark('VirtualListItem gBCR')\n        const rect = node.getBoundingClientRect()\n        stop('VirtualListItem gBCR')\n        // update all item heights in one batch for better perf\n        this.store.batchUpdateForRealm('itemHeights', key, rect.height)\n      })\n      this.doRecalculateHeight = this.doRecalculateHeight.bind(this)\n      registerResizeListener(this.doRecalculateHeight)\n      // this rAF delay is necessary in order to get the fade-in animation\n      // to consistently show\n      this.observe('shownBeforeRaf', shownBeforeRaf => {\n        doubleRAF(() => {\n          this.set({ shown: shownBeforeRaf })\n        })\n      })\n    },\n    ondestroy () {\n      unregisterResizeListener(this.doRecalculateHeight)\n    },\n    store: () => virtualListStore,\n    data: () => ({\n      shown: false\n    }),\n    computed: {\n      shownBeforeRaf: ({ $itemHeights, key }) => $itemHeights[key] > 0\n    },\n    methods: {\n      observe,\n      doRecalculateHeight () {\n        // Recalculate immediately because this is done on-demand, e.g.\n        // when clicking the \"More\" button on a spoiler.\n        if (!this.refs.node) return\n        const rect = this.refs.node.getBoundingClientRect()\n        const { key } = this.get()\n        const { itemHeights } = this.store.get()\n        itemHeights[key] = rect.height\n        this.store.setForRealm({ itemHeights })\n      }\n    }\n  }\n</script>\n","// via https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/queueMicrotask\nfunction queueMicrotaskPolyfill (callback) {\n  Promise.resolve()\n    .then(callback)\n    .catch(e => setTimeout(() => { throw e }))\n}\n\nconst qM = typeof queueMicrotask === 'function' ? queueMicrotask : queueMicrotaskPolyfill\n\nexport {\n  qM as queueMicrotask\n}\n","{#if props}\n  <VirtualListItem {component}\n                   {offset}\n                   {props}\n                   {key}\n                   {index}\n  />\n{/if}\n<script>\n  import VirtualListItem from './VirtualListItem.html'\n  import { mark, stop } from '../../_utils/marks.js'\n  import { scheduleIdleTask } from '../../_utils/scheduleIdleTask.js'\n  import { createPriorityQueue } from '../../_utils/createPriorityQueue.js'\n  import { isMobile } from '../../_utils/userAgent/isMobile.js'\n  import { store } from '../../_store/store.js'\n\n  // In Svelte's implementation of lists, these VirtualListLazyItems can be\n  // created in any order. By default in fact it seems to do it in reverse\n  // order, which we don't really want, because then items render in a janky\n  // way, with the last ones first and then replaced by the first ones,\n  // resulting in a UI that looks like a deck of cards being shuffled.\n  // This functions waits a microtask and then ensures that the callbacks\n  // are called by index, in ascending order.\n  const priorityQueue = createPriorityQueue()\n\n  export default {\n    oncreate () {\n      const { makeProps, key, index } = this.get()\n      const { reduceMotion } = this.store.get()\n      if (makeProps) {\n        // TODO: I would use async/await here, but Firefox 68 for Android has a bug where\n        // these don't resolve in the proper order unless I use promises\n        priorityQueue(index).then(async () => {\n          const props = await makeProps(key)\n          const setProps = () => {\n            mark('VirtualListLazyItem set props')\n            this.set({ props })\n            stop('VirtualListLazyItem set props')\n          }\n          // On desktop, if prefers-reduced-motion is enabled, avoid using scheduleIdleTask\n          // here because it causes the scrollbar to grow in a way that may sicken\n          // people with vestibular disorders.\n          // TODO: someday we can use isInputPending as a better way to break up work\n          // https://www.chromestatus.com/feature/5719830432841728\n          if (!isMobile() && reduceMotion) {\n            setProps()\n          } else {\n            scheduleIdleTask(setProps)\n          }\n        })\n      }\n    },\n    data: () => ({\n      props: undefined\n    }),\n    store: () => store,\n    components: {\n      VirtualListItem\n    }\n  }\n</script>\n","// Promise-based implementation that waits a microtask tick\n// and executes the resolve() functions in priority order\nimport { queueMicrotask } from './queueMicrotask.js'\n\nexport function createPriorityQueue () {\n  const tasks = []\n\n  function flush () {\n    if (tasks.length) {\n      const sortedTasks = tasks.sort((a, b) => a.priority < b.priority ? -1 : 1)\n      for (const task of sortedTasks) {\n        task.resolve()\n      }\n      tasks.length = 0\n    }\n  }\n\n  return function next (priority) {\n    return new Promise(resolve => {\n      tasks.push({ priority, resolve })\n      queueMicrotask(flush)\n    })\n  }\n}\n","<div class=\"virtual-list-footer\"\n  ref:node\n  style=\"transform: translateY({$heightWithoutFooter}px);\" >\n  <svelte:component this={component} />\n</div>\n<style>\n  .virtual-list-footer {\n    position: absolute;\n    top: 0;\n    width: 100%;\n  }\n</style>\n<script>\n  import { virtualListStore } from './virtualListStore.js'\n  import { mark, stop } from '../../_utils/marks.js'\n\n  export default {\n    oncreate () {\n      requestAnimationFrame(() => {\n        const node = this.refs.node\n        if (!node) {\n          return\n        }\n\n        mark('VirtualListFooter gBCR')\n        const rect = node.getBoundingClientRect()\n        stop('VirtualListFooter gBCR')\n        this.store.setForRealm({ footerHeight: rect.height })\n      })\n    },\n    store: () => virtualListStore\n  }\n</script>\n","<div class=\"virtual-list-header {shown ? 'shown' : ''} {fadedIn ? 'faded-in' : ''}\"\n     ref:node >\n  <svelte:component this={component} {virtualProps} />\n</div>\n<style>\n  .virtual-list-header {\n    position: absolute;\n    top: 0;\n    width: 100%;\n    opacity: 0;\n    z-index: 10;\n    transition: none;\n    display: none;\n  }\n  .virtual-list-header.shown {\n    display: block;\n    transition: opacity 0.2s linear;\n  }\n  .virtual-list-header.faded-in {\n    opacity: 1;\n  }\n</style>\n<script>\n  import { virtualListStore } from './virtualListStore.js'\n  import { doubleRAF } from '../../_utils/doubleRAF.js'\n  import { mark, stop } from '../../_utils/marks.js'\n  import { observe } from 'svelte-extras'\n\n  export default {\n    oncreate () {\n      this.observe('shown', shown => {\n        if (shown) {\n          this.doCalculateHeight()\n          doubleRAF(() => this.set({ fadedIn: true })) //  animate in\n        } else {\n          this.set({ fadedIn: false })\n        }\n      }, { init: false })\n    },\n    data: () => ({\n      fadedIn: false\n    }),\n    store: () => virtualListStore,\n    methods: {\n      observe,\n      doCalculateHeight () {\n        const { heightCalculated } = this.get()\n        if (heightCalculated) { // only need to calculate once, it never changes\n          return\n        }\n        this.set({ heightCalculated: true })\n        requestAnimationFrame(() => {\n          mark('VirtualListHeader gBCR')\n          const rect = this.refs.node.getBoundingClientRect()\n          stop('VirtualListHeader gBCR')\n          this.store.setForRealm({ headerHeight: rect.height })\n        })\n      }\n    }\n  }\n</script>\n","<VirtualListContainer {realm} on:initialized on:noNeedToScroll >\n  <div class=\"virtual-list\"\n       style=\"height: {$height}px;\"\n       ref:node >\n    <VirtualListHeader component={headerComponent} virtualProps={headerProps} shown={$showHeader}/>\n    {#if $visibleItems}\n      {#each $visibleItems as visibleItem (visibleItem.key)}\n        <VirtualListLazyItem {component}\n                             offset={visibleItem.offset}\n                             {makeProps}\n                             key={visibleItem.key}\n                             index={visibleItem.index}\n        />\n      {/each}\n      {#if !$visibleItems.length}\n        <div class=\"nothing-to-show\">\n          Nothing to show.\n        </div>\n      {/if}\n    {/if}\n    {#if $showFooter}\n      <VirtualListFooter component={footerComponent} />\n    {/if}\n  </div>\n</VirtualListContainer>\n<style>\n  .virtual-list {\n    position: relative;\n    width: 100%;\n  }\n  .nothing-to-show {\n    font-size: 1.1em;\n    width: 100%;\n    padding: 20px 0;\n    text-align: center;\n  }\n</style>\n<script>\n  import VirtualListContainer from './VirtualListContainer.html'\n  import VirtualListLazyItem from './VirtualListLazyItem.html'\n  import VirtualListFooter from './VirtualListFooter.html'\n  import VirtualListHeader from './VirtualListHeader.html'\n  import { virtualListStore } from './virtualListStore.js'\n  import { isEqual } from '../../_thirdparty/lodash/objects.js'\n  import { throttle } from '../../_thirdparty/lodash/timers.js'\n  import { mark, stop } from '../../_utils/marks.js'\n  import { observe } from 'svelte-extras'\n\n  const DISTANCE_FROM_BOTTOM_TO_FIRE = 800\n  const SCROLL_EVENT_THROTTLE = 1000\n\n  export default {\n    oncreate () {\n      this.fireScrollToBottom = throttle(() => {\n        this.fire('scrollToBottom')\n      }, SCROLL_EVENT_THROTTLE)\n      this.fireScrollToTop = throttle(() => {\n        this.fire('scrollToTop')\n      }, SCROLL_EVENT_THROTTLE)\n      this.observe('showFooter', showFooter => {\n        mark('set showFooter')\n        this.store.setForRealm({ showFooter })\n        mark('set showFooter')\n      })\n      this.observe('showHeader', showHeader => {\n        mark('set showHeader')\n        this.store.setForRealm({ showHeader })\n        stop('set showHeader')\n      })\n      this.observe('items', (newItems, oldItems) => {\n        if (!newItems || isEqual(newItems, oldItems)) {\n          return\n        }\n        mark('set items')\n        this.store.setForRealm({ items: newItems })\n        stop('set items')\n      })\n      // We observe on the component rather than the store to avoid a leak in store listeners\n      // (Svelte automatically removes component listeners, but not store listeners)\n      this.observe('allVisibleItemsHaveHeight', allVisibleItemsHaveHeight => {\n        this.calculateListOffset()\n        if (allVisibleItemsHaveHeight) {\n          this.fire('initializedVisibleItems')\n        }\n      })\n\n      this.observe('distanceFromBottom', (distanceFromBottom) => {\n        if (distanceFromBottom >= 0 &&\n            distanceFromBottom <= DISTANCE_FROM_BOTTOM_TO_FIRE) {\n          this.fireScrollToBottom()\n        }\n      }, { init: false })\n\n      this.observe('scrollTop', (scrollTop) => {\n        this.fire('scrollTopChanged', scrollTop)\n        if (scrollTop === 0) {\n          this.fireScrollToTop()\n        }\n        this.calculateListOffset()\n      })\n    },\n    data: () => ({\n      component: null\n    }),\n    store: () => virtualListStore,\n    components: {\n      VirtualListContainer,\n      VirtualListLazyItem,\n      VirtualListFooter,\n      VirtualListHeader\n    },\n    computed: {\n      distanceFromBottom: ({ $scrollHeight, $scrollTop, $offsetHeight }) => {\n        return $scrollHeight - $scrollTop - $offsetHeight\n      },\n      scrollTop: ({ $scrollTop }) => $scrollTop,\n      allVisibleItemsHaveHeight: ({ $allVisibleItemsHaveHeight }) => $allVisibleItemsHaveHeight,\n      visibleItemKeys: ({ $visibleItems }) => ($visibleItems || []).map(_ => _.key)\n    },\n    methods: {\n      observe,\n      calculateListOffset () {\n        // TODO: better way to get the offset top?\n        const node = this.refs.node\n        if (!node) {\n          return\n        }\n        mark('calculateListOffset')\n        const { offsetParent } = node\n        // TODO: offsetParent is null sometimes in testcafe tests\n        const listOffset = offsetParent ? offsetParent.offsetTop : 0\n        this.store.setForRealm({ listOffset })\n        stop('calculateListOffset')\n      }\n    }\n  }\n</script>\n","import { thunk } from '../thunk.js'\n\nexport const isMobile = thunk(() => process.browser && navigator.userAgent.match(/(?:iPhone|iPod|iPad|Android|KAIOS)/))\n"],"names":["isFullscreen","document","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","observe","setupScroll","this","scrollListener","event","fullscreen","get","onScroll","leading","trailing","teardownScroll","setupFullscreen","listener","onFullscreenChange","bind","addEventListener","teardownFullscreen","removeEventListener","scrollTop","scrollHeight","doubleRAF","store","setForRealm","s","set","onResize","offsetHeight","realm","setCurrentRealm","scrollContainer","allVisibleItemsHaveHeight","initializedScrollTop","requestAnimationFrame","fire","virtualListStore","$allVisibleItemsHaveHeight","doRecalculateHeight","refs","node","rect","getBoundingClientRect","key","itemHeights","height","requestPostAnimationFrame","batchUpdateForRealm","shownBeforeRaf","shown","component","props","index","$length","offset","$itemHeights","qM","queueMicrotask","callback","Promise","resolve","then","catch","e","setTimeout","priorityQueue","tasks","flush","length","sortedTasks","sort","a","b","priority","task","push","createPriorityQueue","makeProps","reduceMotion","async","setProps","isMobile","scheduleIdleTask","undefined","footerHeight","$heightWithoutFooter","doCalculateHeight","heightCalculated","headerHeight","fadedIn","init","virtualProps","DISTANCE_FROM_BOTTOM_TO_FIRE","SCROLL_EVENT_THROTTLE","calculateListOffset","offsetParent","listOffset","offsetTop","fireScrollToBottom","fireScrollToTop","showFooter","showHeader","newItems","oldItems","items","distanceFromBottom","$visibleItems","visibleItem","footerComponent","headerComponent","headerProps","$showHeader","$height","$showFooter","$scrollHeight","$scrollTop","$offsetHeight","map","_","navigator","userAgent","match"],"sourceRoot":""}