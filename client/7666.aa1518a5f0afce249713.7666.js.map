{"version":3,"file":"7666.aa1518a5f0afce249713.7666.js","mappings":"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","sources":["webpack:///./src/routes/_actions/reportStatuses.js","webpack:///./src/routes/_api/report.js","webpack:///./src/routes/_components/dialog/components/ReportDialog.html","webpack:///./src/routes/_actions/getRecentStatusesForAccount.js","webpack:///./src/routes/_components/dialog/creators/showReportDialog.js"],"sourcesContent":["import { store } from '../_store/store.js'\nimport { toast } from '../_components/toast/toast.js'\nimport { report } from '../_api/report.js'\nimport { formatIntl } from '../_utils/formatIntl.js'\n\nexport async function reportStatuses (account, statusIds, comment, forward) {\n  const { currentInstance, accessToken } = store.get()\n  try {\n    await report(currentInstance, accessToken, account.id, statusIds, comment, forward)\n    /* no await */ toast.say(\"Submitted report\")\n  } catch (e) {\n    /* no await */ toast.say(formatIntl([\"Failed to report: \",[\"error\"]], { error: (e.message || '') }))\n  }\n}\n","import { auth, basename } from './utils.js'\nimport { post } from '../_utils/ajax.js'\n\nexport async function report (instanceName, accessToken, accountId, statusIds, comment, forward) {\n  const url = `${basename(instanceName)}/api/v1/reports`\n  return post(url, {\n    account_id: accountId,\n    status_ids: statusIds,\n    comment,\n    forward\n  }, auth(accessToken))\n}\n","<GenericConfirmationDialog\n  {id}\n  {label}\n  {title}\n  className=\"report-dialog-contents\"\n  {positiveText}\n  on:positive=\"doReport()\">\n  <div class=\"report-dialog\">\n    <div class=\"report-flex\">\n      <div class=\"recent-statuses\">\n        {#if loading}\n          <div class=\"loading-spinner-container\">\n            <LoadingSpinner />\n          </div>\n        {:else}\n          <ul>\n            {#each displayStatuses as status (status.id)}\n              <li>\n                <input type=\"checkbox\"\n                       id=\"status-report-{status.id}\"\n                       name=\"status-report-{status.id}\"\n                       checked={status.report}\n                       on:change=\"onChange(status.id, event)\"\n                >\n                <label for=\"status-report-{status.id}\">\n                  {status.text}\n                </label>\n              </li>\n            {/each}\n          </ul>\n        {/if}\n      </div>\n      <div class=\"report-info\">\n        <p>{reportingLabel}</p>\n        <label class=\"sr-only\" id=\"comments-label\">Additional comments</label>\n        <textarea bind:value=\"comment\"\n                  placeholder=\"Additional comments\"\n                  aria-labelledby=\"comments-label\"\n                  maxlength=\"1000\"></textarea>\n        {#if remoteInstance}\n          <p>{forwardDescription}</p>\n          <input type=\"checkbox\"\n                 id=\"report-forward\"\n                 name=\"report-forward\"\n                 bind:checked=\"forward\">\n          <label for=\"report-forward\">\n            {forwardLabel}\n          </label>\n        {/if}\n      </div>\n    </div>\n  </div>\n</GenericConfirmationDialog>\n<style>\n  :global(.report-dialog-contents .confirmation-dialog-form) {\n    max-width: 80vw;\n  }\n  .report-dialog {\n    padding: 20px 40px;\n    overflow-y: auto;\n  }\n  .loading-spinner-container {\n    width: 100%;\n    height: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n  ul {\n    list-style: none;\n    max-height: 30vh;\n    overflow-y: auto;\n    overflow-x: hidden;\n    border: 1px solid var(--main-border);\n  }\n  li {\n    padding: 10px 5px;\n    border-top: 1px solid var(--main-border);\n  }\n  li:first-child {\n    border-top: none;\n  }\n\n  .recent-statuses label {\n    padding: 10px 5px;\n    display: -webkit-box;\n    -webkit-line-clamp: 5;\n    -webkit-box-orient: vertical;\n  }\n  textarea {\n    width: 100%;\n    overflow-y: auto;\n    max-height: 40vh;\n    font-size: 1.3em;\n    min-height: 100px;\n  }\n  p {\n    margin: 20px 0;\n  }\n\n  .recent-statuses li {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n  }\n  .recent-statuses input {\n    margin-right: 10px;\n  }\n  .recent-statuses label {\n    width: 0;\n    flex: 1;\n    word-wrap: break-word;\n    overflow: hidden;\n    white-space: pre-wrap;\n    text-overflow: ellipsis;\n    border-left: 1px solid var(--main-border);\n    padding-left: 10px;\n  }\n\n  .report-flex {\n    display: flex;\n    flex-direction: row;\n  }\n\n  .report-flex > * {\n    flex: 1;\n  }\n\n  .report-info {\n    margin-left: 20px;\n  }\n\n  @media (max-width: 767px) {\n    .report-dialog {\n      padding: 20px;\n      overflow-x: hidden;\n      max-height: 65vh;\n    }\n    .report-flex {\n      flex-direction: column;\n    }\n    .report-info {\n      margin-left: 0;\n    }\n    textarea {\n      max-height: 20vh;\n    }\n    p, label {\n      word-wrap: break-word;\n    }\n    :global(.report-dialog-contents .confirmation-dialog-form) {\n      max-width: calc(100% - 20px);\n    }\n  }\n</style>\n<script>\n  import GenericConfirmationDialog from './GenericConfirmationDialog.html'\n  import LoadingSpinner from '../../LoadingSpinner.html'\n  import { show } from '../helpers/showDialog.js'\n  import { close } from '../helpers/closeDialog.js'\n  import { oncreate as onCreateDialog } from '../helpers/onCreateDialog.js'\n  import { getRecentStatusesForAccount } from '../../../_actions/getRecentStatusesForAccount.js'\n  import { statusHtmlToPlainText } from '../../../_utils/statusHtmlToPlainText.js'\n  import { toast } from '../../toast/toast.js'\n  import { store } from '../../../_store/store.js'\n  import { reportStatuses } from '../../../_actions/reportStatuses.js'\n  import { formatIntl } from '../../../_utils/formatIntl.js'\n\n  export default {\n    async oncreate () {\n      onCreateDialog.call(this)\n      const { account, status, reportMap } = this.get()\n      if (status) {\n        reportMap[status.id] = true\n      }\n      try {\n        const recentStatuses = await getRecentStatusesForAccount(account.id)\n        console.log('recentStatuses', recentStatuses)\n        this.set({ recentStatuses })\n      } catch (err) {\n        console.error(err)\n        /* no await */ toast.say(formatIntl([\"Unable to load recent posts: \",[\"error\"]], { error: (err.message || '') }))\n      } finally {\n        this.set({ loading: false })\n      }\n    },\n    store: () => store,\n    data: () => ({\n      account: undefined,\n      status: undefined,\n      positiveText: \"Report\",\n      reportMap: {},\n      recentStatuses: [],\n      loading: true,\n      forward: false,\n      comment: ''\n    }),\n    computed: {\n      displayStatuses: ({ statuses, reportMap }) => (\n        statuses.map(status => ({\n          id: status.id,\n          text: statusHtmlToPlainText(status.content, status.mentions) || \"(No content)\",\n          report: reportMap[status.id]\n        }))\n      ),\n      statuses: ({ status, recentStatuses }) => (\n        [status].concat((recentStatuses || []).filter(({ id }) => (!status || id !== status.id))).filter(Boolean)\n      ),\n      remoteInstance: ({ account }) => account.acct.split('@')[1],\n      reportingLabel: ({ account, $currentInstance }) => (\n        formatIntl([\"You are reporting \",[\"account\"],\" to the moderators of \",[\"instance\"],\".\"], {\n          account: `@${account.acct}`,\n          instance: $currentInstance\n        })\n      ),\n      forwardDescription: ({ remoteInstance }) => (\n        formatIntl([\"Forward to the moderators of \",[\"instance\"],\" as well?\"], {\n          instance: remoteInstance\n        })\n      ),\n      forwardLabel: ({ remoteInstance }) => (\n        formatIntl([\"Forward to \",[\"instance\"]], {\n          instance: remoteInstance\n        })\n      )\n    },\n    methods: {\n      show,\n      close,\n      onChange (statusId, event) {\n        const report = event.target.checked\n        const { reportMap } = this.get()\n        reportMap[statusId] = report\n      },\n      async doReport () {\n        const { displayStatuses, account, comment, forward, reportMap } = this.get()\n        const statusIds = displayStatuses.map(({ id }) => id).filter(id => reportMap[id])\n        if (!statusIds.length) {\n          toast.say(\"No posts to report\")\n        } else {\n          await reportStatuses(account, statusIds, comment, forward)\n        }\n      }\n    },\n    components: {\n      GenericConfirmationDialog,\n      LoadingSpinner\n    }\n  }\n</script>\n","import { store } from '../_store/store.js'\nimport { getTimeline } from '../_api/timelines.js'\n\nexport async function getRecentStatusesForAccount (accountId) {\n  const { currentInstance, accessToken } = store.get()\n  return (await getTimeline(currentInstance, accessToken, `account/${accountId}`, null, null, 20)).items\n}\n","import ReportDialog from '../components/ReportDialog.html'\nimport { showDialog } from './showDialog.js'\nimport { formatIntl } from '../../../_utils/formatIntl.js'\n\nexport default function showReportDialog ({ account, status }) {\n  const label = formatIntl([\"Report \",[\"account\"]], { account: `@${account.acct}` })\n  return showDialog(ReportDialog, {\n    label,\n    title: label,\n    account,\n    status\n  })\n}\n"],"names":["async","reportStatuses","account","statusIds","comment","forward","currentInstance","accessToken","store","get","instanceName","accountId","url","account_id","status_ids","report","id","toast","say","e","formatIntl","error","message","show","close","onChange","statusId","event","target","checked","reportMap","this","doReport","displayStatuses","map","filter","length","onCreateDialog","call","status","recentStatuses","items","getRecentStatusesForAccount","set","err","console","loading","text","forwardDescription","forwardLabel","undefined","positiveText","label","title","reportingLabel","remoteInstance","concat","Boolean","statuses","statusHtmlToPlainText","content","mentions","acct","split","$currentInstance","instance","showReportDialog"],"sourceRoot":""}