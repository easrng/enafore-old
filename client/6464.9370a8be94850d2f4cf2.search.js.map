{"version":3,"file":"6464.9370a8be94850d2f4cf2.search.js","mappings":"2gCAoBE,MAAMA,EAAgB,I,aAIlBC,YAAW,KACTC,KAAKC,IAAI,CAAEC,OAAO,GAAM,GACvBJ,EACT,C,uEACiB,CACXI,OAAO,G,8lBA7BaA,MAAQ,GAAK,UAAQ,iB,qFAArBA,MAAQ,GAAK,UAAQ,qB,kjBCC1B,E,gHAAlB,IAAM,EAAAC,QAAQC,K,mBADUD,QAAQC,KAAKC,e,kOACrC,IAAM,EAAAF,QAAQC,Q,oDADUD,QAAQC,KAAKC,e,wdCEdF,S,oKAAAA,S,gEAGAG,S,sKAAAA,S,+DAGDC,O,QAASC,M,SAAeC,eAAeC,SAASC,Q,qKAAhDJ,Q,8BAAwBE,eAAeC,SAASC,Q,kFAkBxDC,EAAA,E,2cAzBRH,eAAeI,S,aAApB,Y,2BAGKJ,eAAeK,S,iBAApB,Y,2BAGKL,eAAeC,S,iBAApB,Y,qqBANKD,eAAeI,S,gBAApB,a,+GAAA,M,8BAGKJ,eAAeK,S,QAApB,a,+GAAA,M,8BAGKL,eAAeC,S,QAApB,a,kHAAA,M,gTC4DJ,EAea,CACP,QAAAK,CAAUC,GACRA,EAAEC,iBACFD,EAAEE,kBC5EHC,iBACL,MAAM,gBAAEC,EAAe,YAAEC,EAAW,cAAEC,GAAkBV,EAAA,EAAMW,MAC9DX,EAAA,EAAMX,IAAI,CAAEuB,eAAe,IAC3B,KACE,UACA,MAAMC,QAAgB,EAAAC,EAAA,GAAON,EAAiBC,EAAaC,IACnDA,cAAeK,GAAqBf,EAAA,EAAMW,YAC5CK,QAAQC,IACZJ,EAAQf,SAASoB,KAAIvB,IAAU,EAAAwB,EAAA,IAA8B,CAAExB,cAE7DoB,IAAqBL,GACvBV,EAAA,EAAMX,IAAI,CACR+B,sBAAuBV,EACvBW,cAAeR,GAGrB,CAAE,MAAOT,GACQkB,EAAA,EAAMC,KACnB,EAAAC,EAAA,GAAW,CAAC,wBAAwB,CAAC,UAAW,CAAEC,MAAOrB,EAAEsB,SAAW,MAExEC,QAAQF,MAAMrB,EAChB,CAAE,QACAJ,EAAA,EAAMX,IAAI,CAAEuB,eAAe,GAC7B,CACF,CDqDuBgB,EACrB,EACI,gBAAAC,IACE,EAAAC,EAAA,GAAkB,mBACxB,G,cArBI,IAAAC,IAAG,mBAAoB3C,MAAM,IAAMA,KAAKyC,qBACpCzC,KAAKY,MAAMW,MAAMkB,mBACnBzC,KAAKY,MAAMX,IAAI,CAAEwC,kBAAkB,IACnCzC,KAAKyC,oBAEPzC,KAAKY,MAAMX,IAAI,CAAE2C,gBAAiB,UACxC,C,2uBACiBhC,EAAA,E,kqCA5E0BG,SAAS8B,E,wBAc/CC,eAAc,E,EAIVrC,gBAAkB,EAAAsC,yBAA2B,EAAAC,eAAc,O,sqCARgBF,gB,4KAF7DE,gB,iIAAAA,gB,gCAE6DF,gB,6hHEiCnElC,EAAA,E,sdA3CZqC,gBAAe,E,ieCeH,CACXC,cAAa,G,2IAdNA,c,SAAgBC,Q,gRAAhBD,e,sBAAgBC,Q","sources":["webpack:///./src/routes/_components/LoadingPage.html","webpack:///./src/routes/_components/search/HashtagSearchResult.html","webpack:///./src/routes/_components/search/SearchResults.html","webpack:///./src/routes/_components/search/Search.html","webpack:///./src/routes/_actions/search.js","webpack:///./src/routes/_pages/search.html","webpack:///./src/routes/search.html"],"sourcesContent":["<div class=\"loading-page {shown ? '' : 'hidden'}\">\n  <LoadingSpinner />\n</div>\n<style>\n  .loading-page {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    height: 150px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    z-index: 50;\n    transition: opacity 0.25s linear;\n  }\n</style>\n<script>\n  import LoadingSpinner from './LoadingSpinner.html'\n\n  const SPINNER_DELAY = 700\n\n  export default {\n    oncreate () {\n      setTimeout(() => {\n        this.set({ shown: true })\n      }, SPINNER_DELAY)\n    },\n    data: () => ({\n      shown: false\n    }),\n    components: {\n      LoadingSpinner\n    }\n  }\n</script>","<SearchResult href=\"/tags/{hashtag.name.toLowerCase()}\">\n  {'#' + hashtag.name}\n</SearchResult>\n<style>\n</style>\n<script>\n  import SearchResult from './SearchResult.html'\n  export default {\n    components: {\n      SearchResult\n    }\n  }\n</script>\n","<ul class=\"search-results\">\n  {#each $searchResults.hashtags as hashtag}\n    <HashtagSearchResult {hashtag} />\n  {/each}\n  {#each $searchResults.accounts as account}\n    <AccountSearchResult {account} />\n  {/each}\n  {#each $searchResults.statuses as status, index}\n    <StatusSearchResult {status} {index} length={$searchResults.statuses.length}/>\n  {/each}\n</ul>\n<style>\n  .search-results {\n    list-style: none;\n    box-sizing: border-box;\n    border: 1px solid var(--main-border);\n    border-radius: 2px;\n  }\n</style>\n<script>\n  import { store } from '../../_store/store.js'\n  import AccountSearchResult from './AccountSearchResult.html'\n  import HashtagSearchResult from './HashtagSearchResult.html'\n  import StatusSearchResult from './StatusSearchResult.html'\n\n  export default {\n    store: () => store,\n    components: {\n      AccountSearchResult,\n      HashtagSearchResult,\n      StatusSearchResult\n    }\n  }\n</script>\n","<form class=\"search-input-form\" on:submit=\"onSubmit(event)\">\n  <label class=\"sr-only\" for=\"the-search-input\">Search</label>\n  <div class=\"search-input-wrapper\">\n    <input id=\"the-search-input\"\n           type=\"search\"\n           class=\"search-input\"\n           placeholder=\"Search\"\n           required\n           bind:value=\"$queryInSearch\">\n  </div>\n  <button type=\"submit\" class=\"primary search-button\" aria-label=\"Search\" disabled={$searchLoading}>\n    <SvgIcon className=\"search-button-svg\" href=\"#fa-search\" />\n  </button>\n</form>\n{#if $searchLoading}\n  <div class=\"search-results-container\">\n    <LoadingPage />\n  </div>\n{:elseif $searchResults && $searchResultsForQuery === $queryInSearch}\n  <div class=\"search-results-container\">\n    <SearchResults />\n  </div>\n{/if}\n<style>\n  .search-input-form {\n    display: grid;\n    grid-template-columns: 1fr min-content;\n    grid-gap: 10px;\n  }\n  .search-input-wrapper {\n    position: relative;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n  .search-input {\n    padding: 12px 15px;\n    border-radius: var(--input-border-radius-size);\n    flex: 1;\n    width: 0;\n    min-width: 0;\n  }\n  :global(.search-button-svg) {\n    fill: var(--button-primary-text);\n    width: 18px;\n    height: 18px;\n    flex: 1;\n  }\n  .search-results-container {\n    position: relative;\n    margin-top: 20px;\n  }\n  @media (min-width: 768px) {\n    .search-button {\n      min-width: 100px;\n    }\n  }\n</style>\n<script>\n  import { store } from '../../_store/store.js'\n  import LoadingPage from '../LoadingPage.html'\n  import { doSearch } from '../../_actions/search.js'\n  import SearchResults from './SearchResults.html'\n  import SvgIcon from '../SvgIcon.html'\n  import { on } from '../../_utils/eventBus.js'\n  import { tryToFocusElement } from '../../_utils/tryToFocusElement.js'\n\n  export default {\n    oncreate () {\n      on('focusSearchInput', this, () => this.focusSearchInput()) // user typed hotkey on this page itself\n      if (this.store.get().focusSearchInput) { // we arrived here from a goto via the search hotkey\n        this.store.set({ focusSearchInput: false }) // reset\n        this.focusSearchInput()\n      }\n      this.store.set({ currentTimeline: 'search' })\n    },\n    store: () => store,\n    components: {\n      LoadingPage,\n      SearchResults,\n      SvgIcon\n    },\n    methods: {\n      onSubmit (e) {\n        e.preventDefault()\n        e.stopPropagation()\n        /* no await */ doSearch()\n      },\n      focusSearchInput () {\n        tryToFocusElement('the-search-input')\n      }\n    }\n  }\n</script>\n","import { store } from '../_store/store.js'\nimport { toast } from '../_components/toast/toast.js'\nimport { search } from '../_api/search.js'\nimport { formatIntl } from '../_utils/formatIntl.js'\nimport {\n  prepareToRehydrate,\n  rehydrateStatusOrNotification\n} from './rehydrateStatusOrNotification.js'\n\nexport async function doSearch () {\n  const { currentInstance, accessToken, queryInSearch } = store.get()\n  store.set({ searchLoading: true })\n  try {\n    prepareToRehydrate()\n    const results = await search(currentInstance, accessToken, queryInSearch)\n    const { queryInSearch: newQueryInSearch } = store.get() // avoid race conditions\n    await Promise.all(\n      results.statuses.map(status => rehydrateStatusOrNotification({ status }))\n    )\n    if (newQueryInSearch === queryInSearch) {\n      store.set({\n        searchResultsForQuery: queryInSearch,\n        searchResults: results\n      })\n    }\n  } catch (e) {\n    /* no await */ toast.say(\n      formatIntl([\"Error during search: \",[\"error\"]], { error: e.message || '' })\n    )\n    console.error(e)\n  } finally {\n    store.set({ searchLoading: false })\n  }\n}\n","{#if $isUserLoggedIn}\n<h1 class=\"sr-only\">Search</h1>\n<div class=\"search-page\">\n  <Search></Search>\n</div>\n{:else}\n<HiddenFromSSR>\n  <FreeTextLayout>\n    <h1>Search</h1>\n\n    <p>You can search once logged in to an instance.</p>\n  </FreeTextLayout>\n</HiddenFromSSR>\n<div style=\"display: none\">\n  <!-- TODO: this is just a hack so that `sapper export` knows to crawl these files -->\n  <!-- Note that these links have to be spread out or else they result in ECONNRESET errors during crawling -->\n  <!-- See also community/index.html -->\n  <a href=\"/local\">Local</a>\n  <a href=\"/bubble\">Bubble</a>\n  <a href=\"/federated\">Federated</a>\n  <a href=\"/favorites\">Favorites</a>\n  <a href=\"/direct\">Direct messages</a>\n  <a href=\"/bookmarks\">Bookmarks</a>\n</div>\n{/if}\n<style>\n  .search-page {\n    padding: 20px 20px;\n  }\n\n  @media (max-width: 767px) {\n    .search-page {\n      padding: 20px 10px;\n    }\n  }\n</style>\n<script>\n  import FreeTextLayout from '../_components/FreeTextLayout.html'\n  import { store } from '../_store/store.js'\n  import HiddenFromSSR from '../_components/HiddenFromSSR.html'\n  import Search from '../_components/search/Search.html'\n\n  export default {\n    store: () => store,\n    components: {\n      Search,\n      FreeTextLayout,\n      HiddenFromSSR\n    }\n  }\n</script>\n","<Title name=\"Search\" />\n\n  <LazyPage {pageComponent} {params} />\n\n<script>\n  import Title from './_components/Title.html'\n  import LazyPage from './_components/LazyPage.html'\n  import pageComponent from './_pages/search.html'\n\n  export default {\n    components: {\n\n      Title,\n      LazyPage\n    },\n    data: () => ({\n      pageComponent\n    })\n  }\n</script>\n"],"names":["SPINNER_DELAY","setTimeout","this","set","shown","hashtag","name","toLowerCase","account","status","index","$searchResults","statuses","length","store","hashtags","accounts","onSubmit","e","preventDefault","stopPropagation","async","currentInstance","accessToken","queryInSearch","get","searchLoading","results","search","newQueryInSearch","Promise","all","map","rehydrateStatusOrNotification","searchResultsForQuery","searchResults","toast","say","formatIntl","error","message","console","doSearch","focusSearchInput","tryToFocusElement","on","currentTimeline","event","$searchLoading","$searchResultsForQuery","$queryInSearch","$isUserLoggedIn","pageComponent","params"],"sourceRoot":""}