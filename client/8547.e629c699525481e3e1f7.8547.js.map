{"version":3,"file":"8547.e629c699525481e3e1f7.8547.js","mappings":"kMA0Ba,CACPA,KAAI,IACJC,MAAK,IACL,cAAAC,CAAgBC,GACVA,IAAUC,KAAKC,MAAMF,OAGzBC,KAAKH,OACX,EACI,MAAAK,IACE,OAAK,qBAAsBF,KAAKC,MAAMF,MAC5C,G,cAlBI,IAAAI,IAAG,eAAgBH,KAAMA,KAAKF,gBAC9BM,EAAA,EAAeC,KAAKL,KAC1B,C,uEACiB,CACXM,WAAOC,EACPR,MAAO,U,uEAjBEA,M,WAAkB,E,WAAgBS,I,4DAN9CA,G,QACAC,M,QACAH,M,iIAEQJ,Q,8KAEIH,O,oBAAkCS,I,iCAN9CA,I,oBACAC,O,oBACAH,O,oYCAY,SAASI,IACtB,OAAO,OAAW,EAAe,CAAED,MAAO,gBAC5C,C,gDCDA,MAAM,aAAEE,GAAiB,EAElB,MAAMC,UAAiBD,EAC5B,WAAAE,CAAaC,EAAU,CAAC,GAEtB,GADAC,UACMD,EAAQE,SAAWF,EAAQE,QAAU,GACzC,MAAM,IAAIC,UAAU,6CAGtBjB,KAAKgB,QAAUF,EAAQE,QACvBhB,KAAKkB,MAAQ,IAAIC,IACjBnB,KAAKoB,SAAW,IAAID,IACpBnB,KAAKqB,MAAQ,CACf,CAEA,IAAAC,CAAMC,EAAKC,GAIT,GAHAxB,KAAKkB,MAAMO,IAAIF,EAAKC,GACpBxB,KAAKqB,QAEDrB,KAAKqB,OAASrB,KAAKgB,QAAS,CAE9B,GADAhB,KAAKqB,MAAQ,EACTrB,KAAK0B,cAAc,SACrB,IAAK,MAAMH,KAAOvB,KAAKoB,SAASO,OACzB3B,KAAKkB,MAAMU,IAAIL,IAClBvB,KAAK6B,KAAK,QAAS7B,KAAKoB,SAASnB,IAAIsB,GAAMA,GAIjDvB,KAAKoB,SAAWpB,KAAKkB,MACrBlB,KAAKkB,MAAQ,IAAIC,GACnB,CACF,CAEA,GAAAlB,CAAKsB,GACH,GAAIvB,KAAKkB,MAAMU,IAAIL,GACjB,OAAOvB,KAAKkB,MAAMjB,IAAIsB,GAGxB,GAAIvB,KAAKoB,SAASQ,IAAIL,GAAM,CAC1B,MAAMC,EAAQxB,KAAKoB,SAASnB,IAAIsB,GAGhC,OAFAvB,KAAKoB,SAASU,OAAOP,GACrBvB,KAAKsB,KAAKC,EAAKC,GACRA,CACT,CACF,CAEA,GAAAC,CAAKF,EAAKC,GAOR,OANIxB,KAAKkB,MAAMU,IAAIL,GACjBvB,KAAKkB,MAAMO,IAAIF,EAAKC,GAEpBxB,KAAKsB,KAAKC,EAAKC,GAGVxB,IACT,CAEA,GAAA4B,CAAKL,GACH,OAAOvB,KAAKkB,MAAMU,IAAIL,IAAQvB,KAAKoB,SAASQ,IAAIL,EAClD,CAaA,OAAQA,GACN,MAAMQ,EAAU/B,KAAKkB,MAAMY,OAAOP,GAKlC,OAJIQ,GACF/B,KAAKqB,QAGArB,KAAKoB,SAASU,OAAOP,IAAQQ,CACtC,CAEA,KAAAC,GACEhC,KAAKkB,MAAMc,QACXhC,KAAKoB,SAASY,QACdhC,KAAKqB,MAAQ,CACf,CAEA,UAAAY,GACE,MAAMR,EAAM,IAAIS,IAChB,IAAK,MAAMX,KAAOvB,KAAKkB,MAAMS,OAC3BF,EAAIU,IAAIZ,GAEV,IAAK,MAAMA,KAAOvB,KAAKoB,SAASO,OAC9BF,EAAIU,IAAIZ,GAEV,OAAOE,CACT,E","sources":["webpack:///./src/routes/_components/dialog/components/ComposeDialog.html","webpack:///./src/routes/_components/dialog/creators/showComposeDialog.js","webpack:///./src/routes/_thirdparty/quick-lru/quick-lru.js"],"sourcesContent":["<ModalDialog\n  {id}\n  {label}\n  {title}\n  background=\"var(--main-bg)\"\n  on:show=\"onShow()\"\n>\n  <ComposeBox {realm} autoFocus={true} dialogId={id} />\n</ModalDialog>\n<script>\n  import ModalDialog from './ModalDialog.html'\n  import ComposeBox from '../../compose/ComposeBox.html'\n  import { on, emit } from '../../../_utils/eventBus.js'\n  import { show } from '../helpers/showDialog.js'\n  import { oncreate as onCreateDialog } from '../helpers/onCreateDialog.js'\n  import { close } from '../helpers/closeDialog.js'\n\n  export default {\n    oncreate () {\n      on('postedStatus', this, this.onPostedStatus)\n      onCreateDialog.call(this)\n    },\n    data: () => ({\n      title: undefined,\n      realm: 'dialog'\n    }),\n    methods: {\n      show,\n      close,\n      onPostedStatus (realm) {\n        if (realm !== this.get().realm) {\n          return\n        }\n        this.close()\n      },\n      onShow () {\n        emit('resizeComposeInput', this.get().realm)\n      }\n    },\n    components: {\n      ModalDialog,\n      ComposeBox\n    }\n  }\n</script>\n","import ComposeDialog from '../components/ComposeDialog.html'\nimport { showDialog } from './showDialog.js'\n\nexport default function showComposeDialog () {\n  return showDialog(ComposeDialog, { label: \"Compose post\" })\n}\n","// Forked from https://github.com/sindresorhus/quick-lru/blob/16d15d470a8eb87c2a7dd5b80892d9b74f1acd3c/index.js\n// Adds the ability to listen for 'evict' events using an EventEmitter, also removes some unused code\n\nimport eventsLightPackage from 'events-light'\nconst { EventEmitter } = eventsLightPackage\n\nexport class QuickLRU extends EventEmitter {\n  constructor (options = {}) {\n    super()\n    if (!(options.maxSize && options.maxSize > 0)) {\n      throw new TypeError('`maxSize` must be a number greater than 0')\n    }\n\n    this.maxSize = options.maxSize\n    this.cache = new Map()\n    this.oldCache = new Map()\n    this._size = 0\n  }\n\n  _set (key, value) {\n    this.cache.set(key, value)\n    this._size++\n\n    if (this._size >= this.maxSize) {\n      this._size = 0\n      if (this.listenerCount('evict')) {\n        for (const key of this.oldCache.keys()) {\n          if (!this.cache.has(key)) {\n            this.emit('evict', this.oldCache.get(key), key)\n          }\n        }\n      }\n      this.oldCache = this.cache\n      this.cache = new Map()\n    }\n  }\n\n  get (key) {\n    if (this.cache.has(key)) {\n      return this.cache.get(key)\n    }\n\n    if (this.oldCache.has(key)) {\n      const value = this.oldCache.get(key)\n      this.oldCache.delete(key)\n      this._set(key, value)\n      return value\n    }\n  }\n\n  set (key, value) {\n    if (this.cache.has(key)) {\n      this.cache.set(key, value)\n    } else {\n      this._set(key, value)\n    }\n\n    return this\n  }\n\n  has (key) {\n    return this.cache.has(key) || this.oldCache.has(key)\n  }\n\n  // unused\n  // peek (key) {\n  //   if (this.cache.has(key)) {\n  //     return this.cache.get(key)\n  //   }\n  //\n  //   if (this.oldCache.has(key)) {\n  //     return this.oldCache.get(key)\n  //   }\n  // }\n\n  delete (key) {\n    const deleted = this.cache.delete(key)\n    if (deleted) {\n      this._size--\n    }\n\n    return this.oldCache.delete(key) || deleted\n  }\n\n  clear () {\n    this.cache.clear()\n    this.oldCache.clear()\n    this._size = 0\n  }\n\n  getAllKeys () {\n    const set = new Set()\n    for (const key of this.cache.keys()) {\n      set.add(key)\n    }\n    for (const key of this.oldCache.keys()) {\n      set.add(key)\n    }\n    return set\n  }\n\n  // unused\n  // * keys() {\n  //   for (const [key] of this) {\n  //     yield key;\n  //   }\n  // }\n  //\n  // * values() {\n  //   for (const [, value] of this) {\n  //     yield value;\n  //   }\n  // }\n  //\n  // * [Symbol.iterator]() {\n  //   for (const item of this.cache) {\n  //     yield item;\n  //   }\n  //\n  //   for (const item of this.oldCache) {\n  //     const [key] = item;\n  //     if (!this.cache.has(key)) {\n  //       yield item;\n  //     }\n  //   }\n  // }\n  //\n  // get size () {\n  //   let oldCacheSize = 0\n  //   for (const key of this.oldCache.keys()) {\n  //     if (!this.cache.has(key)) {\n  //       oldCacheSize++\n  //     }\n  //   }\n  //\n  //   return this._size + oldCacheSize\n  // }\n}\n"],"names":["show","close","onPostedStatus","realm","this","get","onShow","on","onCreateDialog","call","title","undefined","id","label","showComposeDialog","EventEmitter","QuickLRU","constructor","options","super","maxSize","TypeError","cache","Map","oldCache","_size","_set","key","value","set","listenerCount","keys","has","emit","delete","deleted","clear","getAllKeys","Set","add"],"sourceRoot":""}