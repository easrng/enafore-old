{"version":3,"file":"1067.7fc20191b1802947402a.1067.js","mappings":"+0BAsHwBA,GAChB,OAAO,OAAW,CAAC,CAAC,SAAS,IAAI,CAAC,UAAU,SAAS,CAAC,KAAO,CAAC,aAAa,MAAQ,MAAO,CACxFC,MAAOD,EAAMC,MACbC,QAASF,EAAMG,OAAS,MAElC,C,MAEa,CACP,aAAAC,GACE,MAAM,cAAEC,EAAa,aAAEC,GAAiBC,KAAKC,OAC7C,QAAYF,EAAcD,EAChC,G,mBApCI,MAAM,aAAEC,GAAiBC,KAAKC,OACxB,eAAEC,GAAmBF,KAAKG,MAAMF,MACtCD,KAAKI,IAAI,CACPN,cAAeI,EAAeH,IAAiB,MAEvD,C,gDAvFqDF,e,gLAMjB,I,EAAvBQ,EAAiB,EAAAZ,O,u0BARgBA,MAAMG,K,cAC9BH,MAAMG,K,2GAGuBU,WAAWC,KAAO,OAAS,SAAO,kB,+BAC5Cd,MAAMe,O,iIAFcf,MAAMG,K,uGADxCE,e,qIAAAA,e,wCAFmBL,MAAMG,Q,gCAC9BH,MAAMG,Q,uFAGuBU,WAAWC,KAAO,OAAS,SAAO,oB,8DAC5Cd,MAAMe,O,sBAGlCH,EAAiB,EAAAZ,U,qDAL+BA,MAAMG,Q,2KAPF,I,IAAxDU,WAAWC,KAAO,kBAAoB,mB,IAElCD,WAAWG,O,aAAhB,Y,klBAFCH,WAAWC,KAAO,kBAAoB,sB,iDAElCD,WAAWG,O,gBAAhB,a,kHAAA,M,0FA4FS,I,qBACA,CACXA,OAAM,IACNC,cAAa,KACbZ,cAAe,M,4iCArGVa,Y,aAAL,Y,ysBAAKA,Y,gBAAL,a,kHAAA,M,+eAyFN,UAeoB,OAAEF,I,MAAc,CAC5B,CACEF,MAAM,EACNE,OAAQA,EAAOG,QAAOC,IAAMA,EAAEN,QAEhC,CACEA,MAAM,EACNE,OAAQA,EAAOG,QAAOC,GAAKA,EAAEN,Q,qGC9GhC,SAASO,EAAsBf,EAAcgB,GAClD,MAAMC,EAAM,IAAG,OAASjB,wCACxB,OAAO,QAAIiB,GAAK,OAAKD,GAAc,CAAEE,QAAS,MAChD,CAEO,SAASC,EAAYnB,EAAcgB,EAAaI,GACrD,MAAMH,EAAM,IAAG,OAASjB,sBAAiCoB,IACzD,OAAO,QAAIH,GAAK,OAAKD,GAAc,CAAEE,QAAS,MAChD,C,iBCTOG,eAAeC,EAAuBC,EAAgBC,EAAWC,EAAWC,GACjF,MAAMC,EAAiBJ,IACvB,IAAIK,EACJ,IACEA,QAAmBJ,GACrB,CAAE,MAAOK,GACPC,QAAQC,MAAM,mBAAoBF,EACpC,CAAE,QACID,GACFF,EAAYE,GAEd,MAAMI,EAAwBL,EAAeM,MAAKC,IACjCT,EAAUS,GACzBR,EAAYQ,EAAe,IAExBN,SACGI,CAEV,CACF,CAIOX,eAAec,EAAkCZ,EAAgBC,EAAWC,EAAWC,GAC5F,IAAIE,EACJ,IACEA,QAAmBJ,GACrB,CAAE,MAAOK,GACPC,QAAQC,MAAM,mBAAoBF,EACpC,CACA,GAAID,EACFF,EAAYE,OACP,CACL,MAAMM,QAAwBX,IACfE,EAAUS,GACzBR,EAAYQ,EACd,CACF,C","sources":["webpack:///./src/routes/_components/settings/instance/ThemeSettings.html","webpack:///./src/routes/_api/user.js","webpack:///./src/routes/_utils/sync.js"],"sourcesContent":["<form class=\"generic-instance-settings\" aria-label=\"Choose a theme\">\n  <div class=\"theme-groups\">\n    {#each themeGroups as themeGroup}\n    <div class=\"theme-group\">\n      <h3>\n        {themeGroup.dark ? \"Dark background\" : \"Light background\" }\n      </h3>\n      {#each themeGroup.themes as theme}\n      <div class=\"theme-picker\">\n        <input type=\"radio\" id=\"choice-theme-{theme.name}\"\n               value={theme.name} checked=\"$currentTheme === theme.name\"\n               bind:group=\"selectedTheme\" on:change=\"onThemeChange()\">\n        <label class=\"theme-picker-label\" for=\"choice-theme-{theme.name}\">\n          <div class=\"theme-preview theme-preview-{themeGroup.dark ? 'dark' : 'light'}\"\n               style=\"background-color: {theme.color};\" >\n          </div>\n          <span class=\"theme-picker-label-span\">\n            {createThemeLabel(theme)}\n          </span>\n        </label>\n      </div>\n      {/each}\n    </div>\n    {/each}\n  </div>\n</form>\n<GenericInstanceSettingsStyle/>\n<style>\n  .theme-groups {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n  }\n  .theme-group {\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n    flex: 1;\n  }\n  .theme-picker {\n    display: flex;\n    align-items: center;\n  }\n  .theme-picker-label {\n    display: flex;\n    align-items: center;\n  }\n  .theme-picker-label-span {\n    margin: 2px 10px 0;\n  }\n  .theme-preview {\n    width: 21px;\n    height: 21px;\n    box-sizing: border-box;\n    border-radius: 2px;\n    margin: 0 2px 0 10px;\n  }\n  .theme-preview-dark {\n    border: 2px solid #000;\n  }\n  .theme-preview-light {\n    border: 2px solid #dadada;\n  }\n\n  h3 {\n    font-size: 1.4em;\n  }\n\n  @media (max-width: 479px) {\n    .theme-groups {\n      grid-template-columns: 1fr;\n    }\n\n    h3 {\n      margin-top: 0.5em;\n    }\n  }\n\n  @media (max-width: 240px) {\n    .theme-groups {\n      grid-row-gap: 25px; /* TODO: \"Dark background\" text overlaps with previous div on KaiOS for some reason */\n    }\n  }\n</style>\n<script>\n  import GenericInstanceSettingsStyle from './GenericInstanceSettingsStyle.html'\n  import { changeTheme } from '../../../_actions/instances.js'\n  import { store } from '../../../_store/store.js'\n  import { themes } from '../../../_static/themes.js'\n  import { DEFAULT_THEME } from '../../../_utils/themeEngine.js'\n  import { formatIntl } from '../../../_utils/formatIntl.js'\n\n  export default {\n    async oncreate () {\n      const { instanceName } = this.get()\n      const { instanceThemes } = this.store.get()\n      this.set({\n        selectedTheme: instanceThemes[instanceName] || DEFAULT_THEME\n      })\n    },\n    store: () => store,\n    data: () => ({\n      themes,\n      DEFAULT_THEME,\n      selectedTheme: DEFAULT_THEME\n    }),\n    computed: {\n      themeGroups: ({ themes }) => ([\n        {\n          dark: false,\n          themes: themes.filter(_ => !_.dark)\n        },\n        {\n          dark: true,\n          themes: themes.filter(_ => _.dark)\n        }\n      ])\n    },\n    helpers: {\n      createThemeLabel (theme) {\n        return formatIntl([[\"label\"],\" \",[\"default\",\"select\",{\"true\":[\"(default)\"],\"other\":[]}]], {\n          label: theme.label,\n          default: theme.name === DEFAULT_THEME\n        })\n      }\n    },\n    methods: {\n      onThemeChange () {\n        const { selectedTheme, instanceName } = this.get()\n        changeTheme(instanceName, selectedTheme)\n      }\n    },\n    components: {\n      GenericInstanceSettingsStyle\n    }\n  }\n</script>\n","import { get, DEFAULT_TIMEOUT } from '../_utils/ajax.js'\nimport { auth, basename } from './utils.js'\n\nexport function getVerifyCredentials (instanceName, accessToken) {\n  const url = `${basename(instanceName)}/api/v1/accounts/verify_credentials`\n  return get(url, auth(accessToken), { timeout: DEFAULT_TIMEOUT })\n}\n\nexport function getAccount (instanceName, accessToken, accountId) {\n  const url = `${basename(instanceName)}/api/v1/accounts/${accountId}`\n  return get(url, auth(accessToken), { timeout: DEFAULT_TIMEOUT })\n}\n","// Hit both the cache and the network, setting state for the cached version first,\n// then the network version (as it's assumed to be fresher). Also update the db afterwards.\nexport async function cacheFirstUpdateAfter (networkFetcher, dbFetcher, dbUpdater, stateSetter) {\n  const networkPromise = networkFetcher() // kick off network request immediately\n  let dbResponse\n  try {\n    dbResponse = await dbFetcher()\n  } catch (err) {\n    console.error('ignored DB error', err)\n  } finally {\n    if (dbResponse) {\n      stateSetter(dbResponse)\n    }\n    const fetchAndUpdatePromise = networkPromise.then(networkResponse => {\n      /* no await */ dbUpdater(networkResponse)\n      stateSetter(networkResponse)\n    })\n    if (!dbResponse) { // no cached result available, await the network\n      await fetchAndUpdatePromise\n    }\n  }\n}\n\n// Try the cache first. If we get a hit, set the state and do nothing. If we don't get a cache hit,\n// then go to the network, update the cache, and set the state.\nexport async function cacheFirstUpdateOnlyIfNotInCache (networkFetcher, dbFetcher, dbUpdater, stateSetter) {\n  let dbResponse\n  try {\n    dbResponse = await dbFetcher()\n  } catch (err) {\n    console.error('ignored DB error', err)\n  }\n  if (dbResponse) {\n    stateSetter(dbResponse)\n  } else {\n    const networkResponse = await networkFetcher()\n    /* no await */ dbUpdater(networkResponse)\n    stateSetter(networkResponse)\n  }\n}\n"],"names":["theme","label","default","name","onThemeChange","selectedTheme","instanceName","this","get","instanceThemes","store","set","createThemeLabel","themeGroup","dark","color","themes","DEFAULT_THEME","themeGroups","filter","_","getVerifyCredentials","accessToken","url","timeout","getAccount","accountId","async","cacheFirstUpdateAfter","networkFetcher","dbFetcher","dbUpdater","stateSetter","networkPromise","dbResponse","err","console","error","fetchAndUpdatePromise","then","networkResponse","cacheFirstUpdateOnlyIfNotInCache"],"sourceRoot":""}