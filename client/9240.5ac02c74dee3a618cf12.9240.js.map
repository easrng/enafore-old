{"version":3,"file":"9240.5ac02c74dee3a618cf12.9240.js","mappings":"6EAAA,cAQS,WAEP,IAAIA,EAAa,kDACbC,EAAe,aACfC,EAAkB,WAEtB,MAAO,CACLC,MAAO,SAAUC,EAAaC,GAO5B,IANA,IAAIC,EACAC,EACAC,EACAC,EAAWJ,GAAWA,EAAQI,WAAY,EAC1CC,EAAQ,GAELN,IACLA,EAAcA,EAAYO,OAG1BJ,EAASN,EAAaW,KAAKR,KAJT,CAiBlB,IAVA,IAAIS,EAAU,CACZC,KAAMP,EAAO,IAQXQ,GAJJX,EAAcA,EAAYY,MAAMT,EAAO,GAAGU,SAIVX,MAAMJ,GAChCE,KAAiBW,GAAiBA,EAAcG,MAAQ,KAC5DZ,EAAQN,EAAWY,KAAKR,KAKxBW,GADAX,EAAcA,EAAYY,MAAMV,EAAM,GAAGW,SACbX,MAAMJ,GAGjB,QAAbI,EAAM,IAA6B,QAAbA,EAAM,IAE9BE,GAAQF,EAAM,IAAMA,EAAM,IAAIa,MAAM,OACpCN,EAAQP,EAAM,IAAME,GAEpBK,EAAQP,EAAM,IAAMA,EAAM,IAAMA,EAAM,GAI1CI,EAAMU,KAAKP,GAEXT,EAAcA,EAAYiB,QAAQnB,EAAiB,GACrD,CAEA,OAAKO,EAWEC,EAVEA,EAAMY,QAAO,SAASC,EAAQC,GAMnC,OALIA,EAAYC,KACdD,EAAYC,IAAIC,SAAQ,SAASD,GAC/BF,EAAOE,GAAOD,EAAYV,IAC5B,IAEKS,CACT,GAAG,CAAC,EAIR,EACAI,UAAW,SAAUC,GACnB,IAAIC,EAAUC,OAAOC,KAAKH,GAAQN,QAAO,SAASO,EAASG,GAGzD,OAFAH,EAAQD,EAAOI,IAAQH,EAAQD,EAAOI,KAAS,GAC/CH,EAAQD,EAAOI,IAAMZ,KAAKY,GACnBH,CACT,GAAG,CAAC,GAMJ,OAJcC,OAAOC,KAAKF,GAASP,QAAO,SAASC,EAAQT,GACzD,OAAOS,EAAOU,OAAO,IAAMnB,EAAO,WAAae,EAAQf,GAAMoB,KAAK,KAAO,IAC3E,GAAG,IAEYA,KAAK,KACtB,EAGJ,EA1FA,EA0FGC,KAtFmCC,EAAOC,QAASD,EAAOC,QAAUC,IAChC,mBAArBC,EAAgB,QAAmBA,EAAgB,OAAO,SAAoB,0BAAjB,KAAiB,kCACzFA,EAAY,GAAID,G,yBCDvB,MAAME,EAAQ,6BACd,MAAMC,UAAkBC,YACtB,WAAAC,GACEC,QACAT,KAAKU,aAAa,CAAEC,KAAM,QAC5B,CACA,iBAAAC,GACE,MAAMC,EAAQC,SAASC,cAAc,SACrCF,EAAMG,YAAc,sBACpB,MAAMC,EAASH,SAASC,cAAc,SAChCG,EAAOJ,SAASC,cAAc,QACpCG,EAAKC,KAAO,QACZ,MAAMC,EAAMN,SAASO,gBAAgBhB,EAAO,OAE5CL,KAAKsB,WAAWN,YAAc,GAE9BhB,KAAKsB,WAAWC,OAAOV,EAAOI,EAAQC,EAAME,GAC5C,MAAMI,EAAS,KACb,MAAMC,EAAW,GACjB,IAAIC,EAAI,EACR,IAAK,MAAMC,KAAS3B,KAAK4B,SACJ,UAAfD,EAAMT,OACVS,EAAMT,KAAO,GAAKQ,IAClBD,EAASxC,KAAK,CACZ4C,MAAOC,SAAS,GAAKH,EAAMI,aAAa,eACxCC,OAAQF,SAAS,GAAKH,EAAMI,aAAa,mBAG7C,IAAIE,EACFD,EAGAE,EAFAC,EAAY,GACZC,EAAQ,GAGV,IAAIC,EAAiB,IACrB,MAAMC,EAAcD,EAAiB,EACrC,IAAKA,EAAgB,MAAM,IAAIE,MAAM,2BAErC,IAAIC,EACAC,EAAU,GACVC,EAAa,GACbC,EAAO,EACX,IAAKjB,EAAI,EAAGO,EAAIR,EAAS3C,OAAQ4C,EAAIO,EAAGP,IACtCc,EAASf,EAASC,GAAGG,MAAQJ,EAASC,GAAGM,OACzCS,EAAQxD,KAAKuD,GACbE,EAAWzD,KAAK2D,KAAKC,MAAe,IAATL,IAG7B,IAAIM,EAAc,EAClB,IAAKpB,EAAI,EAAGO,EAAIQ,EAAQ3D,OAAQ4C,EAAIO,EAAGP,IACrCoB,GAAeL,EAAQf,GAAKY,EAG9B,IAAIS,EAAaH,KAAKC,MAAMC,EAAcT,GAE1C,GAAIU,EAAa,EAAG,CAElB,IACElB,EADEmB,EAAO,EAEXd,EAAeT,EAAS3C,OACxB,IAAImE,EAAU,EACd,IAAKvB,EAAI,EAAGA,EAAIQ,EAAcR,IAC5BG,EACEe,KAAKC,MAAMP,EAAcG,EAAQf,IA9BvB,GA+BEQ,EAAe,GAAMA,EACnCC,EAAUlD,KAAK,CACbiE,EAAG,EACHC,EAAGF,EAAUD,EACbnB,MAAOA,EACPG,OAAQM,IAEVU,GAAQnB,EACJH,IAAMO,EAAI,IACZG,EAAMnD,KAAK,CACT,CAAC+D,EAAM,GACP,CAACA,EAAMV,KAETU,GA5CU,GA+CdL,EAAOL,EACPD,EAAiBW,CACnB,KAAO,CAEL,IAmIEnB,EAnIEuB,EAAa,MACf,CACE,IAEI1B,EAAG2B,EAAGC,EAAGrB,EAAGsB,EAAUC,EAAOL,EAAGM,EAAIC,EAAIC,EAAIC,EAC5CC,EAAIC,EA+GJC,EAAMC,EAlHNZ,EAAa,GACba,EAAIlB,EAIR,GADAd,EAAIS,EAAW5D,OACXmF,GAAK,EACP,MAAO,GAET,GAAIA,EAAIhC,EACN,OAAOS,EAAWwB,KAAKf,GAAM,CAACA,KAEhC,CACE,IAAIM,EAAIO,EAER,IADAA,EAAW,GACNP,EAAK,EAAG,GAAKxB,EAAIwB,EAAKxB,EAAIwB,EAAKxB,EAAG,GAAKA,IAAMwB,IAAOA,EAAI,CAC3D,IAAIC,EAAIS,EAER,IADAA,EAAY,GAEVhB,EAAIO,EAAK,EACT,GAAKO,EAAIP,EAAKO,EAAIP,EAAKO,EACvBd,EAAI,GAAKc,IAAMP,IAAOA,EAEtBS,EAAUlF,KAAK,GAEjB+E,EAAS/E,KAAKkF,EAChB,CACAX,EAAQQ,CACV,CACA,CACE,IAAIP,EAAIM,EAAMC,EAEd,IADAA,EAAW,GAETP,EAAK,EAAGM,EAAO9B,EAAI,EACnB,GAAK8B,EAAON,EAAKM,EAAON,EAAKM,EAC7B,GAAKA,IAASN,IAAOA,EACrB,CACA,IAAIC,EAAIU,EAAOD,EAEf,IADAA,EAAY,GAEVhB,EAAIO,EAAK,EAAGU,EAAQH,EAAI,EACxB,GAAKG,EAAQV,EAAKU,EAAQV,EAAKU,EAC/BjB,EAAI,GAAKiB,IAAUV,IAAOA,EAE1BS,EAAUlF,KAAK,GAEjB+E,EAAS/E,KAAKkF,EAChB,CACAZ,EAAWS,CACb,CACA,IACEtC,EAAI+B,EAAK,EACT,GAAKxB,EAAIwB,EAAKxB,EAAIwB,EAAKxB,EACvBP,EAAI,GAAKO,IAAMwB,IAAOA,EAEtBD,EAAM9B,GAAG,GAAKgB,EAAWhB,IAAMA,EAAI8B,EAAM9B,EAAI,GAAG,GAAK,GAEvD,IACE2B,EAAIK,EAAK,EACT,GAAKO,EAAIP,EAAKO,EAAIP,EAAKO,EACvBZ,EAAI,GAAKY,IAAMP,IAAOA,EAEtBF,EAAM,GAAGH,GAAKX,EAAW,GAE3B,IACEhB,EAAIiC,EAAK,EACT,GAAK1B,EAAI0B,EAAK1B,EAAI0B,EAAK1B,EACvBP,EAAI,GAAKO,IAAM0B,IAAOA,EAEtB,IACEN,EAAIO,EAAK,EACT,GAAKK,EAAIL,EAAKK,EAAIL,EAAKK,EACvBZ,EAAI,GAAKY,IAAML,IAAOA,EACtB,CAEA,IADAN,EAAI,GAEFH,EAAIU,EAAK,EACT,GAAKnC,EAAImC,EAAKnC,EAAImC,EAAKnC,EACvByB,EAAI,GAAKzB,IAAMmC,IAAOA,EAEtBP,EAAErE,KAAK,CACL2D,KAAKyB,IAAIb,EAAML,GAAGE,EAAI,GAAIG,EAAM9B,GAAG,GAAK8B,EAAML,GAAG,IACjDA,IAGJ,IAAImB,EAAW,EACbC,EAAW,EACb,IAAKV,EAAK,EAAGC,EAAMR,EAAExE,OAAQ+E,EAAKC,EAAKD,KAC1B,IAAPA,GAAYP,EAAEO,GAAI,GAAKS,KACzBA,EAAWhB,EAAEO,GAAI,GACjBU,EAAWV,GAGfP,EAAIA,EAAEiB,GACNf,EAAM9B,GAAG2B,GAAKC,EAAE,GAChBC,EAAS7B,EAAI,GAAG2B,EAAI,GAAKC,EAAE,EAC7B,CAIF,IAFArB,GAAQ,EACRgC,GAAQ,EACDA,GAAK,GAAG,CACb,IAAIJ,EAAIE,EAAMK,EAAOJ,EAErB,IADAA,EAAW,GAETtC,EAAImC,EAAKE,EAAOR,EAAStB,EAAI,GAAGgC,GAAK,EAAGG,EAAQnC,EAAI,EACpD8B,GAAQK,EAAQP,EAAKO,EAAQP,EAAKO,EAClC1C,EAAIqC,GAAQK,IAAUP,IAAOA,EAE7BG,EAAS/E,KAAKyD,EAAWhB,IAK3B,GAHA0B,EAAWoB,QAAQR,GACnB/B,EAAIsB,EAAStB,EAAI,GAAGgC,GACpBA,GAAQ,EACE,IAANhC,EAAS,KACf,CAGA,IADA+B,EAAW,GAETtC,EAAImC,EAAK,EAAGE,EAAO9B,EAAI,EACvB,GAAK8B,EAAOF,EAAKE,EAAOF,EAAKE,EAC7BrC,EAAI,GAAKqC,IAASF,IAAOA,EAEzBG,EAAS/E,KAAKyD,EAAWhB,IAG3B,OADA0B,EAAWoB,QAAQR,GACZZ,CACT,CACD,EAhIgB,GAiIbrE,EAAQ,EACRiE,EAAO,EAEX,IAAK,IAAItB,EAAI,EAAGA,EAAI0B,EAAWtE,OAAQ4C,IAAK,CAC1C,MAAM+C,EAAYrB,EAAW1B,GAC7B,IAAIgD,EAAgB3F,EAChB4F,EAAe,EACnB,IAAK,IAAItB,EAAI,EAAGY,EAAIQ,EAAU3F,OAAQuE,EAAIY,EAAGZ,IAC3CsB,GAAgBlC,EAAQiC,EAAgBrB,GACxCtE,IAEFiE,EAAO,EACPhB,EAASY,KAAKC,MAAMR,EAAiBsC,GACrCzC,EAAeuC,EAAU3F,OACzB,IAAK,IAAIuE,EAAI,EAAGA,EAAInB,EAAcmB,IAChCxB,EAAQe,KAAKC,OACTR,EApMM,GAoMYH,EAAe,IAAgByC,EACjDlC,EAAQiC,EAAgBrB,IAE5BlB,EAAUlD,KAAK,CACbiE,EAAGP,EACHQ,EAAGH,EACHnB,MAAOA,EACPG,OAAQA,IAEVgB,GAAQnB,EACJwB,IAAMnB,EAAe,IACvBc,GA/MQ,EAgNRZ,EAAMnD,KAAK,CACT,CAAC+D,EAAML,GACP,CAACK,EAAML,EAAOX,MAIpBW,GAAQX,EACJN,IAAM0B,EAAWtE,OAAS,IAC5B6D,GAxNU,EAyNVP,EAAMnD,KAAK,CACT,CAAC,EAAG0D,GACJ,CAACN,EAAgBM,KAGvB,CACF,CAEA1B,EAAOD,YAAc,sBAAsBqB,KAAkBM,KAC7DvB,EAAIwD,aAAa,UAAW,OAAOvC,KAAkBM,KACrDvB,EAAIJ,YAAc,GAClB,MAAM6D,EAAW/D,SAASO,gBAAgBhB,EAAO,QACjDwE,EAASD,aACP,IACAxC,EAAM8B,KAAKY,GAAM,KAAKA,EAAE,GAAG/E,KAAK,UAAU+E,EAAE,GAAG/E,KAAK,SAAQA,KAAK,MAEnE8E,EAASD,aACP,QACA,iEAEF,MAAMG,EAAWjE,SAASO,gBAAgBhB,EAAO,QAC3C2E,EAAWlE,SAASO,gBAAgBhB,EAAO,QACjD2E,EAASJ,aACP,QACA,gDAEFG,EAASH,aAAa,KAAM,SAC5BG,EAASxD,OAAOyD,EAAUH,GAC1B,MAAMI,EAAanE,SAASO,gBAAgBhB,EAAO,KACnD4E,EAAW1D,UACNY,EAAU+B,KAAI,CAACgB,EAAKxD,KACrB,MAAMyD,EAAKrE,SAASO,gBAAgBhB,EAAO,iBAC3C8E,EAAGP,aAAa,IAAK,GAAKM,EAAI/B,GAC9BgC,EAAGP,aAAa,IAAK,GAAKM,EAAIhC,GAC9BiC,EAAGP,aAAa,QAAS,GAAKM,EAAIrD,OAClCsD,EAAGP,aAAa,SAAU,GAAKM,EAAIlD,QACnC,MAAMd,EAAOJ,SAASC,cAAc,QAGpC,OAFAG,EAAKC,KAAO,GAAKO,EACjByD,EAAG5D,OAAOL,GACHiE,CAAE,KAGbF,EAAWL,aAAa,OAAQ,eAChCxD,EAAIG,OAAOwD,EAAUE,EAAW,EAElCzD,IACA,IAAI4D,iBAAiB5D,GAAQ6D,QAAQrF,KAAM,CACzCsF,WAAW,EACXC,YAAY,GAEhB,EAEFC,eAAeC,OAAO,oBAAqBnF,E","sources":["webpack:///./node_modules/li/lib/index.js","webpack:///./node_modules/@easrng/image-grid/index.js"],"sourcesContent":["(function (name, definition, context) {\n\n  //try CommonJS, then AMD (require.js), then use global.\n\n  if (typeof module != 'undefined' && module.exports) module.exports = definition();\n  else if (typeof context['define'] == 'function' && context['define']['amd']) define(definition);\n  else context[name] = definition();\n\n})('li', function () {\n  // compile regular expressions ahead of time for efficiency\n  var relsRegExp = /^;\\s*([^\"=]+)=(?:\"([^\"]+)\"|([^\";,]+)(?:[;,]|$))/;\n  var sourceRegExp = /^<([^>]*)>/;\n  var delimiterRegExp = /^\\s*,\\s*/;\n\n  return {\n    parse: function (linksHeader, options) {\n      var match;\n      var source;\n      var rels;\n      var extended = options && options.extended || false;\n      var links = [];\n\n      while (linksHeader) {\n        linksHeader = linksHeader.trim();\n\n        // Parse `<link>`\n        source = sourceRegExp.exec(linksHeader);\n        if (!source) break;\n\n        var current = {\n          link: source[1]\n        };\n\n        // Move cursor\n        linksHeader = linksHeader.slice(source[0].length);\n\n        // Parse `; attr=relation` and `; attr=\"relation\"`\n\n        var nextDelimiter = linksHeader.match(delimiterRegExp);\n        while(linksHeader && (!nextDelimiter || nextDelimiter.index > 0)) {\n          match = relsRegExp.exec(linksHeader);\n          if (!match) break;\n\n          // Move cursor\n          linksHeader = linksHeader.slice(match[0].length);\n          nextDelimiter = linksHeader.match(delimiterRegExp);\n\n\n          if (match[1] === 'rel' || match[1] === 'rev') {\n            // Add either quoted rel or unquoted rel\n            rels = (match[2] || match[3]).split(/\\s+/);\n            current[match[1]] = rels;\n          } else {\n            current[match[1]] = match[2] || match[3];\n          }\n        }\n\n        links.push(current);\n        // Move cursor\n        linksHeader = linksHeader.replace(delimiterRegExp, '');\n      }\n\n      if (!extended) {\n        return links.reduce(function(result, currentLink) {\n          if (currentLink.rel) {\n            currentLink.rel.forEach(function(rel) {\n              result[rel] = currentLink.link;\n            });\n          }\n          return result;\n        }, {});\n      }\n\n      return links;\n    },\n    stringify: function (params) {\n      var grouped = Object.keys(params).reduce(function(grouped, key) {\n        grouped[params[key]] = grouped[params[key]] || [];\n        grouped[params[key]].push(key);\n        return grouped;\n      }, {});\n\n      var entries = Object.keys(grouped).reduce(function(result, link) {\n        return result.concat('<' + link + '>; rel=\"' + grouped[link].join(' ') + '\"');\n      }, []);\n\n      return entries.join(', ');\n    }\n  };\n\n}, this);\n","/**\nCopyright 2015 Natural Atlas, Inc.\nCopyright 2023 easrng <https://easrng.net>\nSPDX-License-Identifier: Apache-2.0\n*/\nconst svgNS = \"http://www.w3.org/2000/svg\";\nclass ImageGrid extends HTMLElement {\n  constructor() {\n    super();\n    this.attachShadow({ mode: \"open\" });\n  }\n  connectedCallback() {\n    const style = document.createElement(\"style\");\n    style.textContent = \":host{display:flex}\";\n    const style2 = document.createElement(\"style\");\n    const slot = document.createElement(\"slot\");\n    slot.name = \"extra\";\n    const svg = document.createElementNS(svgNS, \"svg\");\n    // @ts-ignore\n    this.shadowRoot.textContent = \"\";\n    // @ts-ignore\n    this.shadowRoot.append(style, style2, slot, svg);\n    const update = () => {\n      const elements = [];\n      let i = 0;\n      for (const child of this.children) {\n        if (child.slot === \"extra\") continue;\n        child.slot = \"\" + i++;\n        elements.push({\n          width: parseInt(\"\" + child.getAttribute(\"data-width\")),\n          height: parseInt(\"\" + child.getAttribute(\"data-height\")),\n        });\n      }\n      let n,\n        height,\n        positions = [],\n        lines = [],\n        elementCount;\n      const spacing = 0;\n      let containerWidth = 512;\n      const idealHeight = containerWidth / 2;\n      if (!containerWidth) throw new Error(\"Invalid container width\");\n      // calculate aspect ratio of all photos\n      let aspect;\n      let aspects = [];\n      let aspects100 = [];\n      let ySum = 0;\n      for (i = 0, n = elements.length; i < n; i++) {\n        aspect = elements[i].width / elements[i].height;\n        aspects.push(aspect);\n        aspects100.push(Math.round(aspect * 100));\n      }\n      // calculate total width of all photos\n      let summedWidth = 0;\n      for (i = 0, n = aspects.length; i < n; i++) {\n        summedWidth += aspects[i] * idealHeight;\n      }\n      // calculate rows needed\n      let rowsNeeded = Math.round(summedWidth / containerWidth);\n      // adjust photo sizes\n      if (rowsNeeded < 1) {\n        // (2a) Fallback to just standard size\n        let xSum = 0,\n          width;\n        elementCount = elements.length;\n        let padLeft = 0;\n        for (i = 0; i < elementCount; i++) {\n          width =\n            Math.round(idealHeight * aspects[i]) -\n            (spacing * (elementCount - 1)) / elementCount;\n          positions.push({\n            y: 0,\n            x: padLeft + xSum,\n            width: width,\n            height: idealHeight,\n          });\n          xSum += width;\n          if (i !== n - 1) {\n            lines.push([\n              [xSum, 0],\n              [xSum, idealHeight],\n            ]);\n            xSum += spacing;\n          }\n        }\n        ySum = idealHeight;\n        containerWidth = xSum;\n      } else {\n        // (2b) Distribute photos over rows using the aspect ratio as weight\n        let partitions = (() => {\n          {\n            let partitions = [];\n            let k = rowsNeeded;\n            let i, j, m, n, solution, table, x, _i, _j, _k, _l;\n            let _m, _nn;\n            n = aspects100.length;\n            if (k <= 0) {\n              return [];\n            }\n            if (k > n) {\n              return aspects100.map((x) => [x]);\n            }\n            {\n              let _i, _results;\n              _results = [];\n              for (_i = 0; 0 <= n ? _i < n : _i > n; 0 <= n ? ++_i : --_i) {\n                let _j, _results1;\n                _results1 = [];\n                for (\n                  x = _j = 0;\n                  0 <= k ? _j < k : _j > k;\n                  x = 0 <= k ? ++_j : --_j\n                ) {\n                  _results1.push(0);\n                }\n                _results.push(_results1);\n              }\n              table = _results;\n            }\n            {\n              let _i, _ref, _results;\n              _results = [];\n              for (\n                _i = 0, _ref = n - 1;\n                0 <= _ref ? _i < _ref : _i > _ref;\n                0 <= _ref ? ++_i : --_i\n              ) {\n                let _j, _ref1, _results1;\n                _results1 = [];\n                for (\n                  x = _j = 0, _ref1 = k - 1;\n                  0 <= _ref1 ? _j < _ref1 : _j > _ref1;\n                  x = 0 <= _ref1 ? ++_j : --_j\n                ) {\n                  _results1.push(0);\n                }\n                _results.push(_results1);\n              }\n              solution = _results;\n            }\n            for (\n              i = _i = 0;\n              0 <= n ? _i < n : _i > n;\n              i = 0 <= n ? ++_i : --_i\n            ) {\n              table[i][0] = aspects100[i] + (i ? table[i - 1][0] : 0);\n            }\n            for (\n              j = _j = 0;\n              0 <= k ? _j < k : _j > k;\n              j = 0 <= k ? ++_j : --_j\n            ) {\n              table[0][j] = aspects100[0];\n            }\n            for (\n              i = _k = 1;\n              1 <= n ? _k < n : _k > n;\n              i = 1 <= n ? ++_k : --_k\n            ) {\n              for (\n                j = _l = 1;\n                1 <= k ? _l < k : _l > k;\n                j = 1 <= k ? ++_l : --_l\n              ) {\n                m = [];\n                for (\n                  x = _m = 0;\n                  0 <= i ? _m < i : _m > i;\n                  x = 0 <= i ? ++_m : --_m\n                ) {\n                  m.push([\n                    Math.max(table[x][j - 1], table[i][0] - table[x][0]),\n                    x,\n                  ]);\n                }\n                let minValue = 0,\n                  minIndex = 0;\n                for (_m = 0, _nn = m.length; _m < _nn; _m++) {\n                  if (_m === 0 || m[_m][0] < minValue) {\n                    minValue = m[_m][0];\n                    minIndex = _m;\n                  }\n                }\n                m = m[minIndex];\n                table[i][j] = m[0];\n                solution[i - 1][j - 1] = m[1];\n              }\n            }\n            n = n - 1;\n            k = k - 2;\n            while (k >= 0) {\n              let _m, _ref, _ref1, _results;\n              _results = [];\n              for (\n                i = _m = _ref = solution[n - 1][k] + 1, _ref1 = n + 1;\n                _ref <= _ref1 ? _m < _ref1 : _m > _ref1;\n                i = _ref <= _ref1 ? ++_m : --_m\n              ) {\n                _results.push(aspects100[i]);\n              }\n              partitions.unshift(_results);\n              n = solution[n - 1][k];\n              k = k - 1;\n              if (n === 0) break;\n            }\n            let _ref, _results;\n            _results = [];\n            for (\n              i = _m = 0, _ref = n + 1;\n              0 <= _ref ? _m < _ref : _m > _ref;\n              i = 0 <= _ref ? ++_m : --_m\n            ) {\n              _results.push(aspects100[i]);\n            }\n            partitions.unshift(_results);\n            return partitions;\n          }\n        })();\n        let index = 0;\n        let xSum = 0,\n          width;\n        for (let i = 0; i < partitions.length; i++) {\n          const partition = partitions[i];\n          let element_index = index;\n          let summedRatios = 0;\n          for (let j = 0, k = partition.length; j < k; j++) {\n            summedRatios += aspects[element_index + j];\n            index++;\n          }\n          xSum = 0;\n          height = Math.round(containerWidth / summedRatios);\n          elementCount = partition.length;\n          for (let j = 0; j < elementCount; j++) {\n            width = Math.round(\n              ((containerWidth - (elementCount - 1) * spacing) / summedRatios) *\n                aspects[element_index + j]\n            );\n            positions.push({\n              y: ySum,\n              x: xSum,\n              width: width,\n              height: height,\n            });\n            xSum += width;\n            if (j !== elementCount - 1) {\n              xSum += spacing;\n              lines.push([\n                [xSum, ySum],\n                [xSum, ySum + height],\n              ]);\n            }\n          }\n          ySum += height;\n          if (i !== partitions.length - 1) {\n            ySum += spacing;\n            lines.push([\n              [0, ySum],\n              [containerWidth, ySum],\n            ]);\n          }\n        }\n      }\n      console.log(lines);\n      style2.textContent = `:host{aspect-ratio:${containerWidth}/${ySum}}`;\n      svg.setAttribute(\"viewBox\", `0 0 ${containerWidth} ${ySum}`);\n      svg.textContent = \"\";\n      const linePath = document.createElementNS(svgNS, \"path\");\n      linePath.setAttribute(\n        \"d\",\n        lines.map((e) => `M ${e[0].join(\",\")} L ${e[1].join(\",\")}`).join(\" \")\n      );\n      linePath.setAttribute(\n        \"style\",\n        \"stroke:#000;stroke-width:4px;vector-effect:non-scaling-stroke\"\n      );\n      const lineMask = document.createElementNS(svgNS, \"mask\");\n      const lineRect = document.createElementNS(svgNS, \"rect\");\n      lineRect.setAttribute(\n        \"style\",\n        \"x:-1%;y:-1%;width:102%;height:102%;fill:#fff\"\n      );\n      lineMask.setAttribute(\"id\", \"lines\");\n      lineMask.append(lineRect, linePath);\n      const imageGroup = document.createElementNS(svgNS, \"g\");\n      imageGroup.append(\n        ...positions.map((pos, i) => {\n          const fo = document.createElementNS(svgNS, \"foreignObject\");\n          fo.setAttribute(\"x\", \"\" + pos.x);\n          fo.setAttribute(\"y\", \"\" + pos.y);\n          fo.setAttribute(\"width\", \"\" + pos.width);\n          fo.setAttribute(\"height\", \"\" + pos.height);\n          const slot = document.createElement(\"slot\");\n          slot.name = \"\" + i;\n          fo.append(slot);\n          return fo;\n        })\n      );\n      imageGroup.setAttribute(\"mask\", \"url(#lines)\");\n      svg.append(lineMask, imageGroup);\n    };\n    update();\n    new MutationObserver(update).observe(this, {\n      childList: true,\n      attributes: true,\n    });\n  }\n}\ncustomElements.define(\"easrng-image-grid\", ImageGrid);\n"],"names":["relsRegExp","sourceRegExp","delimiterRegExp","parse","linksHeader","options","match","source","rels","extended","links","trim","exec","current","link","nextDelimiter","slice","length","index","split","push","replace","reduce","result","currentLink","rel","forEach","stringify","params","grouped","Object","keys","key","concat","join","this","module","exports","definition","context","svgNS","ImageGrid","HTMLElement","constructor","super","attachShadow","mode","connectedCallback","style","document","createElement","textContent","style2","slot","name","svg","createElementNS","shadowRoot","append","update","elements","i","child","children","width","parseInt","getAttribute","height","n","elementCount","positions","lines","containerWidth","idealHeight","Error","aspect","aspects","aspects100","ySum","Math","round","summedWidth","rowsNeeded","xSum","padLeft","y","x","partitions","j","m","solution","table","_i","_j","_k","_l","_m","_nn","_ref","_results","k","map","_results1","_ref1","max","minValue","minIndex","unshift","partition","element_index","summedRatios","setAttribute","linePath","e","lineMask","lineRect","imageGroup","pos","fo","MutationObserver","observe","childList","attributes","customElements","define"],"sourceRoot":""}