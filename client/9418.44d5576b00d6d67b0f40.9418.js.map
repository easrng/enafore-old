{"version":3,"file":"9418.44d5576b00d6d67b0f40.9418.js","mappings":"wRAsEA,YAwCiB,cAAEA,I,OC3GUC,ED2GsBD,GC1GnCE,EAAA,EAAOC,MAAKC,GAAKA,EAAEC,OAASJ,KAAcC,EAAA,EAAOC,MAAKC,GAAKA,EAAEC,OAAS,QACvEC,KAFR,IAAsBL,C,ODgHhB,CACPM,KAAI,IACJC,MAAK,IACL,eAAAC,CAAiBC,GACf,MAAM,MAAEC,GAAUC,KAAKC,MACF,mBAAVF,EACTA,EAAMD,EAAMI,SAEZ,QAAYH,EAAOD,EAAMI,QAE3BF,KAAKJ,OACX,EACI,eAAAO,CAAiBL,GAEG,cAAdA,EAAMM,KACRN,EAAMO,OAAOC,WAAWC,eAC0B,UAAlDT,EAAMO,OAAOC,WAAWC,cAAcC,SACtCV,EAAMW,iBAEd,G,mBA9DIC,EAAA,EAAeC,KAAKX,MACpB,MAAM,YAAEY,GAAgBZ,KAAKC,OACvB,gBAAEY,EAAe,eAAEC,GAAmBd,KAAKe,MAAMd,OACjD,OAAEe,GAAWhB,KAAKiB,KAMxB,GALAD,EAAOJ,YAAcA,EACjB,OACFI,EAAOE,KAAO,MAGZL,EAAiB,CACnB,MAAMM,EAAQC,SAASC,cAAc,SACrCF,EAAMG,YAAc,sCACpBN,EAAOV,WAAWiB,YAAYJ,EACpC,EACI,QAAmBH,EAAOV,YAC1BN,KAAKwB,GAAG,WAAW,KAAM,QAAqBR,EAAOV,cAChDQ,IACH,EAAAW,EAAA,IAAU,KACRC,uBAAsB,KACpBV,EAAOV,WAAWqB,cAAc,SAASC,OAAM,GAChD,KAGA,EAAAC,EAAA,aACG,UAENC,0BAA0Bd,EAAOV,YAEzC,C,mDAIiBS,EAAA,E,kHACA,CACXgB,kBAAiB,KACjBC,sBAAqB,O,w+BA9FLnC,gBAAgBC,E,iBACpBK,gBAAgBL,E,aAb/BmC,G,QACAC,M,QACAC,M,kBACiB,E,0cAMNJ,mB,mBACKC,sB,iBACNI,SAAW,OAAS,SAAO,kB,mLAF1BL,mB,6CACKC,uB,sBACNI,SAAW,OAAS,SAAO,qB,sCAXrCH,I,oBACAC,O,oBACAC,O,6pBA4GiB,oBAAEE,EAAmB,cAAEC,I,OACnC,EAAAC,EAAA,GAAsCF,EAAqBC,E,mDE7GpD,SAASE,EAAiBzC,GACvC,OAAO,OAAW,EAAa,CAC7BmC,MAAO,QACPC,MAAO,QACPpC,SAEJ,C,mECPO,MAAMiC,EAAwB,UAAU,WAGlCS,OAAkB,EAKlBV,EAA+B,UAAX,IAAqB,KAAO,G,iBCVtD,SAASQ,EAAuC3B,EAAa8B,GAClE,OAAK9B,EAGEA,EAAY+B,QAAOC,GAASA,EAAMC,oBAAmBC,KAAIF,IAAS,CACvEnD,KAAMmD,EAAMG,UACZC,WAAY,CAACJ,EAAMG,WACnBE,IAAKP,EAAeE,EAAMK,IAAML,EAAMM,WACtCC,SAAUP,EAAMO,aANT,EAQX,C,iCCVO,SAAS1B,EAAW2B,GACzB1B,uBAAsB,IAAMA,sBAAsB0B,IACpD,C","sources":["webpack:///./src/routes/_components/dialog/components/EmojiDialog.html","webpack:///./src/routes/_utils/isDarkTheme.js","webpack:///./src/routes/_components/dialog/creators/showEmojiDialog.js","webpack:///./src/routes/_static/emojiPickerIntl.js","webpack:///./src/routes/_utils/convertCustomEmojiToEmojiPickerFormat.js","webpack:///./src/routes/_utils/doubleRAF.js"],"sourcesContent":["<ModalDialog\n  {id}\n  {label}\n  {title}\n  shrinkWidthToFit={true}\n  background=\"var(--main-bg)\"\n>\n  <div class=\"emoji-container\">\n    <emoji-picker\n      ref:picker\n      locale={emojiPickerLocale}\n      data-source={emojiPickerDataSource}\n      class={darkMode ? 'dark' : 'light'}\n      on:emoji-click=\"onEmojiSelected(event)\"\n      on:keydown=\"onPickerKeydown(event)\"\n    ></emoji-picker>\n  </div>\n</ModalDialog>\n<style>\n  emoji-picker {\n    --indicator-color: var(--main-theme-color);\n    --outline-color: var(--focus-outline);\n    --input-border-radius: var(--input-border-radius-size);\n  }\n\n  .emoji-container, emoji-picker {\n    width: 100%;\n  }\n\n  @media (max-width: 320px) {\n    emoji-picker {\n      --emoji-padding: 0.25rem;\n      --input-padding: 0.125rem;\n    }\n    emoji-picker {\n      --num-columns: 6;\n    }\n  }\n\n  @media (max-width: 240px) {\n    emoji-picker {\n      --num-columns: 6;\n      --emoji-size: 1.125rem;\n      --emoji-padding: 0.125rem;\n      height: 240px;\n    }\n  }\n\n  @media (max-height: 450px) {\n    emoji-picker {\n      height: calc(100vh - 75px); /* leave room for the dialog bar */\n    }\n  }\n</style>\n<script>\n  import ModalDialog from './ModalDialog.html'\n  import { store } from '../../../_store/store.js'\n  import { insertEmoji } from '../../../_actions/emoji.js'\n  import { show } from '../helpers/showDialog.js'\n  import { close } from '../helpers/closeDialog.js'\n  import { oncreate as onCreateDialog } from '../helpers/onCreateDialog.js'\n  import { isDarkTheme } from '../../../_utils/isDarkTheme.js'\n  import 'emoji-picker-element/picker'\n  import { registerShadowRoot, unregisterShadowRoot } from '../../../_thirdparty/a11y-dialog/a11y-dialog.js'\n  import { doubleRAF } from '../../../_utils/doubleRAF.js'\n  import { convertCustomEmojiToEmojiPickerFormat } from '../../../_utils/convertCustomEmojiToEmojiPickerFormat.js'\n  import { supportsFocusVisible } from '../../../_utils/supportsFocusVisible.js'\n  import { importFocusVisible } from '../../../_utils/polyfills/asyncPolyfills.js'\n  import { emojiPickerI18n, emojiPickerDataSource, emojiPickerLocale } from '../../../_static/emojiPickerIntl.js'\n\n  export default {\n    async oncreate () {\n      onCreateDialog.call(this)\n      const { customEmoji } = this.get()\n      const { enableGrayscale, isUserTouching } = this.store.get()\n      const { picker } = this.refs\n      picker.customEmoji = customEmoji\n      if (emojiPickerI18n) {\n        picker.i18n = emojiPickerI18n\n      }\n      // break into shadow DOM to fix grayscale in Wellness grayscale mode\n      if (enableGrayscale) {\n        const style = document.createElement('style')\n        style.textContent = '.emoji { filter: grayscale(100%); }'\n        picker.shadowRoot.appendChild(style)\n      }\n      registerShadowRoot(picker.shadowRoot)\n      this.on('destroy', () => unregisterShadowRoot(picker.shadowRoot))\n      if (!isUserTouching) { // auto focus the input on desktop\n        doubleRAF(() => { // triple rAF because a11y tries to focus as well\n          requestAnimationFrame(() => {\n            picker.shadowRoot.querySelector('input').focus()\n          })\n        })\n      }\n      if (!supportsFocusVisible()) {\n        await importFocusVisible()\n        /* global applyFocusVisiblePolyfill */\n        applyFocusVisiblePolyfill(picker.shadowRoot)\n      }\n    },\n    components: {\n      ModalDialog\n    },\n    store: () => store,\n    data: () => ({\n      emojiPickerLocale,\n      emojiPickerDataSource\n    }),\n    computed: {\n      darkMode: ({ $currentTheme }) => isDarkTheme($currentTheme),\n      customEmoji: ({ $currentCustomEmoji, $autoplayGifs }) => (\n        convertCustomEmojiToEmojiPickerFormat($currentCustomEmoji, $autoplayGifs)\n      )\n    },\n    methods: {\n      show,\n      close,\n      onEmojiSelected (event) {\n        const { realm } = this.get()\n        if (typeof realm === 'function') {\n          realm(event.detail)\n        } else {\n          insertEmoji(realm, event.detail)\n        }\n        this.close()\n      },\n      onPickerKeydown (event) {\n        // workaround for shortcuts -- see acceptShortcutEvent() in shortcuts.js\n        if (event.key === 'Backspace' &&\n          event.target.shadowRoot.activeElement &&\n          event.target.shadowRoot.activeElement.tagName === 'INPUT') {\n          event.stopPropagation() // prevent our hotkeys from activating when pressing backspace in the input\n        }\n      }\n    }\n  }\n</script>\n","import { themes } from '../_static/themes.js'\nimport { DEFAULT_THEME } from './themeEngine.js'\n\nexport function isDarkTheme (themeName) {\n  const theme = themes.find(_ => _.name === themeName) || themes.find(_ => _.name === DEFAULT_THEME)\n  return theme.dark\n}\n","import EmojiDialog from '../components/EmojiDialog.html'\nimport { showDialog } from './showDialog.js'\n\nexport default function showEmojiDialog (realm) {\n  return showDialog(EmojiDialog, {\n    label: \"Emoji\",\n    title: \"Emoji\",\n    realm\n  })\n}\n","import { LOCALE } from './intl.js'\n\nexport const emojiPickerDataSource = `/emoji-${LOCALE}.json`\n\n// this should be undefined for English; it's already bundled with emoji-picker-element\nexport const emojiPickerI18n = process.env.EMOJI_PICKER_I18N\n\n// To avoid creating a new IDB database named emoji-picker-en-US, just\n// reuse the existing default \"en\" one (otherwise people will end up with\n// a stale database taking up useless space)\nexport const emojiPickerLocale = LOCALE === 'en-US' ? 'en' : LOCALE\n","export function convertCustomEmojiToEmojiPickerFormat (customEmoji, autoplayGifs) {\n  if (!customEmoji) {\n    return []\n  }\n  return customEmoji.filter(emoji => emoji.visible_in_picker).map(emoji => ({\n    name: emoji.shortcode,\n    shortcodes: [emoji.shortcode],\n    url: autoplayGifs ? emoji.url : emoji.static_url,\n    category: emoji.category\n  }))\n}\n","export function doubleRAF (fn) {\n  requestAnimationFrame(() => requestAnimationFrame(fn))\n}\n"],"names":["$currentTheme","themeName","themes","find","_","name","dark","show","close","onEmojiSelected","event","realm","this","get","detail","onPickerKeydown","key","target","shadowRoot","activeElement","tagName","stopPropagation","onCreateDialog","call","customEmoji","enableGrayscale","isUserTouching","store","picker","refs","i18n","style","document","createElement","textContent","appendChild","on","doubleRAF","requestAnimationFrame","querySelector","focus","supportsFocusVisible","applyFocusVisiblePolyfill","emojiPickerLocale","emojiPickerDataSource","id","label","title","darkMode","$currentCustomEmoji","$autoplayGifs","convertCustomEmojiToEmojiPickerFormat","showEmojiDialog","emojiPickerI18n","autoplayGifs","filter","emoji","visible_in_picker","map","shortcode","shortcodes","url","static_url","category","fn"],"sourceRoot":""}