{"version":3,"file":"3660.ef2db2a1253384ee5fe4.blocked.js","mappings":"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","sources":["webpack:///./src/routes/_pages/blocked.html","webpack:///./src/routes/blocked.html","webpack:///./src/routes/_actions/accounts.js","webpack:///./src/routes/_api/relationships.js","webpack:///./src/routes/_actions/block.js","webpack:///./src/routes/_api/block.js","webpack:///./src/routes/_api/blockedAndMuted.js","webpack:///./src/routes/_api/user.js"],"sourcesContent":["<DynamicPageBanner title=\"Blocked users\" icon=\"#fa-ban\" />\n{#if $isUserLoggedIn }\n  <AccountsListPage {accountsFetcher} {accountActions} />\n{/if}\n<script>\n  import AccountsListPage from '../_components/AccountsListPage.html'\n  import { store } from '../_store/store.js'\n  import { getBlockedAccounts } from '../_api/blockedAndMuted.js'\n  import DynamicPageBanner from '../_components/DynamicPageBanner.html'\n  import { setAccountBlocked } from '../_actions/block.js'\n\n  export default {\n    data: () => ({\n      accountActions: [\n        {\n          icon: '#fa-unlock',\n          label: \"Unblock\",\n          onclick: (accountId) => setAccountBlocked(accountId, false, true)\n        }\n      ]\n    }),\n    computed: {\n      accountsFetcher: ({ $currentInstance, $accessToken }) => () => getBlockedAccounts($currentInstance, $accessToken)\n    },\n    store: () => store,\n    components: {\n      AccountsListPage,\n      DynamicPageBanner\n    }\n  }\n</script>\n","<Title name=\"Blocked users\" />\n\n  <LazyPage {pageComponent} {params} />\n\n<script>\n  import Title from './_components/Title.html'\n  import LazyPage from './_components/LazyPage.html'\n  import pageComponent from './_pages/blocked.html'\n\n  export default {\n    components: {\n\n      Title,\n      LazyPage\n    },\n    data: () => ({\n      pageComponent\n    })\n  }\n</script>\n","import { getAccount } from '../_api/user.js'\nimport { getRelationship } from '../_api/relationships.js'\nimport { database } from '../_database/database.js'\nimport { store } from '../_store/store.js'\n\nasync function _updateAccount (accountId, instanceName, accessToken) {\n  const localPromise = database.getAccount(instanceName, accountId)\n  const remotePromise = getAccount(instanceName, accessToken, accountId).then(account => {\n    /* no await */ database.setAccount(instanceName, account)\n    return account\n  })\n\n  try {\n    store.set({ currentAccountProfile: (await localPromise) })\n  } catch (e) {\n    console.error(e)\n  }\n  try {\n    store.set({ currentAccountProfile: (await remotePromise) })\n  } catch (e) {\n    console.error(e)\n  }\n}\n\nasync function _updateRelationship (accountId, instanceName, accessToken) {\n  const localPromise = database.getRelationship(instanceName, accountId)\n  const remotePromise = getRelationship(instanceName, accessToken, accountId).then(relationship => {\n    /* no await */ database.setRelationship(instanceName, relationship)\n    return relationship\n  })\n  try {\n    store.set({ currentAccountRelationship: (await localPromise) })\n  } catch (e) {\n    console.error(e)\n  }\n  try {\n    store.set({ currentAccountRelationship: (await remotePromise) })\n  } catch (e) {\n    console.error(e)\n  }\n}\n\nexport async function updateLocalRelationship (instanceName, accountId, relationship) {\n  await database.setRelationship(instanceName, relationship)\n  try {\n    store.set({ currentAccountRelationship: relationship })\n  } catch (e) {\n    console.error(e)\n  }\n}\n\nexport async function clearProfileAndRelationship () {\n  store.set({\n    currentAccountProfile: null,\n    currentAccountRelationship: null\n  })\n}\n\nexport async function updateProfileAndRelationship (accountId) {\n  const { currentInstance, accessToken } = store.get()\n\n  await clearProfileAndRelationship()\n  await Promise.all([\n    _updateAccount(accountId, currentInstance, accessToken),\n    _updateRelationship(accountId, currentInstance, accessToken)\n  ])\n}\n\nexport async function updateRelationship (accountId) {\n  const { currentInstance, accessToken } = store.get()\n\n  await clearProfileAndRelationship()\n  await _updateRelationship(accountId, currentInstance, accessToken)\n}\n","import { basename, auth } from './utils.js'\nimport { get, paramsString, DEFAULT_TIMEOUT } from '../_utils/ajax.js'\n\nexport async function getRelationship (instanceName, accessToken, accountId) {\n  const url = `${basename(instanceName)}/api/v1/accounts/relationships?${paramsString({ id: accountId })}`\n  const res = await get(url, auth(accessToken), { timeout: DEFAULT_TIMEOUT })\n  return res[0]\n}\n","import { store } from '../_store/store.js'\nimport { blockAccount, unblockAccount } from '../_api/block.js'\nimport { toast } from '../_components/toast/toast.js'\nimport { updateLocalRelationship } from './accounts.js'\nimport { emit } from '../_utils/eventBus.js'\nimport { formatIntl } from '../_utils/formatIntl.js'\n\nexport async function setAccountBlocked (accountId, block, toastOnSuccess) {\n  const { currentInstance, accessToken } = store.get()\n  try {\n    let relationship\n    if (block) {\n      relationship = await blockAccount(currentInstance, accessToken, accountId)\n    } else {\n      relationship = await unblockAccount(currentInstance, accessToken, accountId)\n    }\n    await updateLocalRelationship(currentInstance, accountId, relationship)\n    if (toastOnSuccess) {\n      if (block) {\n        /* no await */ toast.say(\"Blocked account\")\n      } else {\n        /* no await */ toast.say(\"Unblocked account\")\n      }\n    }\n    emit('refreshAccountsList')\n  } catch (e) {\n    console.error(e)\n    /* no await */ toast.say(block\n      ? formatIntl([\"Unable to block account: \",[\"error\"]], { block: !!block, error: (e.message || '') })\n      : formatIntl([\"Unable to unblock account: \",[\"error\"]], { error: (e.message || '') })\n    )\n  }\n}\n","import { auth, basename } from './utils.js'\nimport { post, WRITE_TIMEOUT } from '../_utils/ajax.js'\n\nexport async function blockAccount (instanceName, accessToken, accountId) {\n  const url = `${basename(instanceName)}/api/v1/accounts/${accountId}/block`\n  return post(url, null, auth(accessToken), { timeout: WRITE_TIMEOUT })\n}\n\nexport async function unblockAccount (instanceName, accessToken, accountId) {\n  const url = `${basename(instanceName)}/api/v1/accounts/${accountId}/unblock`\n  return post(url, null, auth(accessToken), { timeout: WRITE_TIMEOUT })\n}\n","import { DEFAULT_TIMEOUT, get, paramsString } from '../_utils/ajax.js'\nimport { auth, basename } from './utils.js'\n\nexport async function getBlockedAccounts (instanceName, accessToken, limit = 80) {\n  let url = `${basename(instanceName)}/api/v1/blocks`\n  url += '?' + paramsString({ limit })\n  return get(url, auth(accessToken), { timeout: DEFAULT_TIMEOUT })\n}\n\nexport async function getMutedAccounts (instanceName, accessToken, limit = 80) {\n  let url = `${basename(instanceName)}/api/v1/mutes`\n  url += '?' + paramsString({ limit })\n  return get(url, auth(accessToken), { timeout: DEFAULT_TIMEOUT })\n}\n","import { get, DEFAULT_TIMEOUT } from '../_utils/ajax.js'\nimport { auth, basename } from './utils.js'\n\nexport function getVerifyCredentials (instanceName, accessToken) {\n  const url = `${basename(instanceName)}/api/v1/accounts/verify_credentials`\n  return get(url, auth(accessToken), { timeout: DEFAULT_TIMEOUT })\n}\n\nexport function getAccount (instanceName, accessToken, accountId) {\n  const url = `${basename(instanceName)}/api/v1/accounts/${accountId}`\n  return get(url, auth(accessToken), { timeout: DEFAULT_TIMEOUT })\n}\n"],"names":["accountsFetcher","accountActions","store","icon","label","onclick","accountId","$isUserLoggedIn","$currentInstance","$accessToken","pageComponent","params","async","_updateAccount","instanceName","accessToken","localPromise","database","getAccount","remotePromise","then","account","setAccount","set","currentAccountProfile","e","console","error","_updateRelationship","getRelationship","url","id","timeout","relationship","setRelationship","currentAccountRelationship","updateLocalRelationship","clearProfileAndRelationship","updateProfileAndRelationship","currentInstance","get","Promise","all","updateRelationship","setAccountBlocked","block","toastOnSuccess","blockAccount","unblockAccount","toast","say","formatIntl","message","getBlockedAccounts","limit","getMutedAccounts","getVerifyCredentials"],"sourceRoot":""}